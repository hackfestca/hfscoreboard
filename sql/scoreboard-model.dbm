<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.8.1" last-position="0,27" last-zoom="1"
	 default-schema="public" default-owner="postgres">
<role name="hfowner"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="martin"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="scoreboard"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="_postgresql"
      superuser="true"
      encrypted="true"
      password="********">
</role>

<role name="owner"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="player"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="web"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="flagupdater"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="admin"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="hfadmins"
      encrypted="true"
      password="********">
	<roles names="owner,admin" role-type="member" />
</role>

<role name="hfplayers"
      encrypted="true"
      password="********">
	<roles names="player" role-type="member" />
</role>

<role name="hfscore"
      encrypted="true"
      password="********">
	<roles names="web" role-type="member" />
</role>

<role name="hfflagupdater"
      encrypted="true"
      password="********">
	<roles names="flagupdater" role-type="member" />
</role>

<database name="scoreboard" encoding="UTF8" lc-collate="C" lc-ctype="C">
	<role name="owner"/>
	<tablespace name="pg_default"/>
</database>

<schema name="public" protected="true" rect-visible="true" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<schema name="scoreboard" rect-visible="true" fill-color="#4519c1">
	<role name="owner"/>
</schema>

<schema name="pgcrypto" rect-visible="true" fill-color="#056367">
	<role name="owner"/>
</schema>

<schema name="tablefunc" rect-visible="true" fill-color="#e2981c">
	<role name="owner"/>
</schema>

<extension name="pgcrypto" cur-version="1.0">
	<schema name="pgcrypto"/>
	<comment><![CDATA[cryptographic functions]]></comment>
</extension>

<extension name="tablefunc" cur-version="1.0">
	<schema name="tablefunc"/>
	<comment><![CDATA[functions that manipulate whole tables, including crosstab]]></comment>
</extension>

<sequence name="status_history_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<sequence name="wallet_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="wallet">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="688.143" y="1237.14"/>
	<column name="id" not-null="true" default-value="nextval('wallet_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="publicid" not-null="true">
		<type name="character varying" length="64"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="amount" not-null="true">
		<type name="money"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_wallet_name" type="ck-constr" table="scoreboard.wallet">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_wallet_publicid" type="ck-constr" table="scoreboard.wallet">
			<expression><![CDATA[(amount >= (0)::money)]]></expression>
	</constraint>
	<constraint name="wallet_pkey" type="pk-constr" table="scoreboard.wallet">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="wallet_publicid_key" type="uq-constr" table="scoreboard.wallet">
		<columns names="publicid" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="team_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="team">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="283.857" y="675.714"/>
	<column name="id" not-null="true" default-value="nextval('team_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="net" not-null="true">
		<type name="inet"/>
	</column>
	<column name="wallet" not-null="true">
		<type name="integer"/>
	</column>
	<column name="hide" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_team_name" type="ck-constr" table="scoreboard.team">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="team_pkey" type="pk-constr" table="scoreboard.team">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="team_name_key" type="uq-constr" table="scoreboard.team">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
	<constraint name="team_net_key" type="uq-constr" table="scoreboard.team">
		<columns names="net" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="flagstatus_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="flagstatus">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1808.57" y="432.857"/>
	<column name="id" not-null="true" default-value="nextval('flagstatus_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_status_code" type="ck-constr" table="scoreboard.flagstatus">
			<expression><![CDATA[(code > 0)]]></expression>
	</constraint>
	<constraint name="valid_status_name" type="ck-constr" table="scoreboard.flagstatus">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="flagstatus_pkey" type="pk-constr" table="scoreboard.flagstatus">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="flagstatus_code_key" type="uq-constr" table="scoreboard.flagstatus">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="host_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="host">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1810" y="165.714"/>
	<column name="id" not-null="true" default-value="nextval('host_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="os" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_host_name" type="ck-constr" table="scoreboard.host">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_host_os" type="ck-constr" table="scoreboard.host">
			<expression><![CDATA[((os)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="host_pkey" type="pk-constr" table="scoreboard.host">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="host_name_key" type="uq-constr" table="scoreboard.host">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="flagcategory_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="flagcategory">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1805.71" y="285.829"/>
	<column name="id" not-null="true" default-value="nextval('flagcategory_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="displayname" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="hidden" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_host_name" type="ck-constr" table="scoreboard.flagcategory">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_host_dname" type="ck-constr" table="scoreboard.flagcategory">
			<expression><![CDATA[((displayname)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="flagcategory_pkey" type="pk-constr" table="scoreboard.flagcategory">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="flagcategory_name_key" type="uq-constr" table="scoreboard.flagcategory">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
	<constraint name="flagcategory_displayname_key" type="uq-constr" table="scoreboard.flagcategory">
		<columns names="displayname" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="flagauthor_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="flagauthor">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1811" y="561.543"/>
	<column name="id" not-null="true" default-value="nextval('flagauthor_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="nick" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="flagauthor_pkey" type="pk-constr" table="scoreboard.flagauthor">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="flagauthor_name_key" type="uq-constr" table="scoreboard.flagauthor">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
	<constraint name="flagauthor_nick_key" type="uq-constr" table="scoreboard.flagauthor">
		<columns names="nick" ref-type="src-columns"/>
	</constraint>
	<constraint name="u_flagauthor_constraint" type="uq-constr" table="scoreboard.flagauthor">
		<columns names="name,nick" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="flagtype_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="flagtype">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1812.71" y="672.971"/>
	<column name="id" not-null="true" default-value="nextval('flagtype_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_flagtype_name" type="ck-constr" table="scoreboard.flagtype">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="flagtype_pkey" type="pk-constr" table="scoreboard.flagtype">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="flagtype_code_key" type="uq-constr" table="scoreboard.flagtype">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="flagtype_name_key" type="uq-constr" table="scoreboard.flagtype">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="flag_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="flag">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1185.86" y="387.257"/>
	<column name="id" not-null="true" default-value="nextval('flag_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="value" not-null="true">
		<type name="character varying" length="64"/>
	</column>
	<column name="pts" not-null="true">
		<type name="integer"/>
	</column>
	<column name="host" not-null="true">
		<type name="integer"/>
	</column>
	<column name="category" not-null="true">
		<type name="integer"/>
	</column>
	<column name="statuscode" not-null="true">
		<type name="integer"/>
	</column>
	<column name="author">
		<type name="integer"/>
	</column>
	<column name="type" not-null="true">
		<type name="integer"/>
	</column>
	<column name="displayinterval">
		<type name="interval"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="hint">
		<type name="text"/>
	</column>
	<column name="isking" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="updatecmd" default-value="NULL::character varying">
		<type name="character varying" length="255"/>
	</column>
	<column name="monitorcmd" default-value="NULL::character varying">
		<type name="character varying" length="255"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_flag_name" type="ck-constr" table="scoreboard.flag">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_flag_value" type="ck-constr" table="scoreboard.flag">
			<expression><![CDATA[((value)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_flag_pts" type="ck-constr" table="scoreboard.flag">
			<expression><![CDATA[((pts >= 1) AND (pts <= 700))]]></expression>
	</constraint>
	<constraint name="valid_flag_displayts" type="ck-constr" table="scoreboard.flag">
			<expression><![CDATA[(displayinterval > '00:00:00'::interval)]]></expression>
	</constraint>
	<constraint name="flag_pkey" type="pk-constr" table="scoreboard.flag">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="flag_name_key" type="uq-constr" table="scoreboard.flag">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
	<constraint name="flag_value_key" type="uq-constr" table="scoreboard.flag">
		<columns names="value" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="kingflag_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="kingflag">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1190.14" y="795.829"/>
	<column name="id" not-null="true" default-value="nextval('kingflag_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="flagid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="value" not-null="true">
		<type name="character" length="64"/>
	</column>
	<column name="pts" not-null="true">
		<type name="integer"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_kingflag_value" type="ck-constr" table="scoreboard.kingflag">
			<expression><![CDATA[(value <> ''::bpchar)]]></expression>
	</constraint>
	<constraint name="valid_kingflag_pts" type="ck-constr" table="scoreboard.kingflag">
			<expression><![CDATA[((pts >= 1) AND (pts <= 3))]]></expression>
	</constraint>
	<constraint name="kingflag_pkey" type="pk-constr" table="scoreboard.kingflag">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="kingflag_value_key" type="uq-constr" table="scoreboard.kingflag">
		<columns names="value" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="team_flag_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="team_flag">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="795.714" y="511.657"/>
	<column name="id" not-null="true" default-value="nextval('team_flag_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="teamid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="flagid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="playerip" not-null="true">
		<type name="inet"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="team_flag_pkey" type="pk-constr" table="scoreboard.team_flag">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="u_flag_constraint" type="uq-constr" table="scoreboard.team_flag">
		<columns names="teamid,flagid" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="team_kingflag_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="team_kingflag">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="790.857" y="744.514"/>
	<column name="id" not-null="true" default-value="nextval('team_kingflag_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="teamid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="kingflagid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="playerip" not-null="true">
		<type name="inet"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="team_kingflag_pkey" type="pk-constr" table="scoreboard.team_kingflag">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="u_kingflag_constraint" type="uq-constr" table="scoreboard.team_kingflag">
		<columns names="teamid,kingflagid" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="submit_history_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="submit_history">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="812.714" y="171.086"/>
	<column name="id" not-null="true" default-value="nextval('submit_history_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="teamid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="playerip" not-null="true">
		<type name="inet"/>
	</column>
	<column name="value" not-null="true">
		<type name="character varying" length="64"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="submit_history_pkey" type="pk-constr" table="scoreboard.submit_history">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="flagstatus_history_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="flagstatus_history">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1311.57" y="111.657"/>
	<column name="id" not-null="true" default-value="nextval('flagstatus_history_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="flagid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="statuscode" not-null="true">
		<type name="integer"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="flagstatus_history_pkey" type="pk-constr" table="scoreboard.flagstatus_history">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="transactiontype_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="transactiontype">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1788.14" y="1400.23"/>
	<column name="id" not-null="true" default-value="nextval('transactiontype_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_status_code" type="ck-constr" table="scoreboard.transactiontype">
			<expression><![CDATA[(code > 0)]]></expression>
	</constraint>
	<constraint name="valid_status_name" type="ck-constr" table="scoreboard.transactiontype">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="transactiontype_pkey" type="pk-constr" table="scoreboard.transactiontype">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="transactiontype_code_key" type="uq-constr" table="scoreboard.transactiontype">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="transaction_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="transaction">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1261.43" y="1378.2"/>
	<column name="id" not-null="true" default-value="nextval('transaction_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="srcwalletid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dstwalletid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="amount" not-null="true">
		<type name="money"/>
	</column>
	<column name="type" not-null="true">
		<type name="integer"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="transaction_pkey" type="pk-constr" table="scoreboard.transaction">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="bmitemstatus_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="bmitemstatus">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1877" y="1105.34"/>
	<column name="id" not-null="true" default-value="nextval('bmitemstatus_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_bmitemstatus_code" type="ck-constr" table="scoreboard.bmitemstatus">
			<expression><![CDATA[(code > 0)]]></expression>
	</constraint>
	<constraint name="valid_bmitemstatus_name" type="ck-constr" table="scoreboard.bmitemstatus">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="bmitemstatus_pkey" type="pk-constr" table="scoreboard.bmitemstatus">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="bmitemstatus_code_key" type="uq-constr" table="scoreboard.bmitemstatus">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="bmitemcategory_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="bmitemcategory">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1878.43" y="989.629"/>
	<column name="id" not-null="true" default-value="nextval('bmitemcategory_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="displayname" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_bmitemcategory_name" type="ck-constr" table="scoreboard.bmitemcategory">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_bmitemcategory_displayname" type="ck-constr" table="scoreboard.bmitemcategory">
			<expression><![CDATA[((displayname)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="bmitemcategory_pkey" type="pk-constr" table="scoreboard.bmitemcategory">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="bmitemcategory_name_key" type="uq-constr" table="scoreboard.bmitemcategory">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
	<constraint name="bmitemcategory_displayname_key" type="uq-constr" table="scoreboard.bmitemcategory">
		<columns names="displayname" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="bmitemreview_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="bmitemreview">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1879.43" y="1218.2"/>
	<column name="id" not-null="true" default-value="nextval('bmitemreview_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="rating" default-value="0">
		<type name="integer"/>
	</column>
	<column name="comments">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_bmitemreview_rating" type="ck-constr" table="scoreboard.bmitemreview">
			<expression><![CDATA[((rating >= 0) AND (rating <= 5))]]></expression>
	</constraint>
	<constraint name="bmitemreview_pkey" type="pk-constr" table="scoreboard.bmitemreview">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="bmitem_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="bmitem">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1189.43" y="1045.34"/>
	<column name="id" not-null="true" default-value="nextval('bmitem_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="publicid" not-null="true">
		<type name="character varying" length="64"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="category" not-null="true">
		<type name="integer"/>
	</column>
	<column name="statuscode" not-null="true">
		<type name="integer"/>
	</column>
	<column name="review">
		<type name="integer"/>
	</column>
	<column name="ownerwallet" not-null="true">
		<type name="integer"/>
	</column>
	<column name="amount" not-null="true">
		<type name="money"/>
	</column>
	<column name="qty">
		<type name="integer"/>
	</column>
	<column name="displayinterval">
		<type name="interval"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="data" not-null="true">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_bmitem_name" type="ck-constr" table="scoreboard.bmitem">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_bmitem_data" type="ck-constr" table="scoreboard.bmitem">
			<expression><![CDATA[(data <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_bmitem_amount" type="ck-constr" table="scoreboard.bmitem">
			<expression><![CDATA[(amount > (0)::money)]]></expression>
	</constraint>
	<constraint name="valid_bmitem_displayts" type="ck-constr" table="scoreboard.bmitem">
			<expression><![CDATA[(displayinterval > '00:00:00'::interval)]]></expression>
	</constraint>
	<constraint name="bmitem_pkey" type="pk-constr" table="scoreboard.bmitem">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="bmitem_publicid_key" type="uq-constr" table="scoreboard.bmitem">
		<columns names="publicid" ref-type="src-columns"/>
	</constraint>
	<constraint name="bmitem_name_key" type="uq-constr" table="scoreboard.bmitem">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="team_bmitem_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="team_bmitem">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="784.286" y="959.029"/>
	<column name="id" not-null="true" default-value="nextval('team_bmitem_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="teamid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="bmitemid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="playerip" not-null="true">
		<type name="inet"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="team_bmitem_pkey" type="pk-constr" table="scoreboard.team_bmitem">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="u_bmitem_constraint" type="uq-constr" table="scoreboard.team_bmitem">
		<columns names="teamid,bmitemid" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="news_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="news">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="64.5714" y="1341.89"/>
	<column name="id" not-null="true" default-value="nextval('news_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="title" not-null="true">
		<type name="character varying" length="150"/>
	</column>
	<column name="displayts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_title_name" type="ck-constr" table="scoreboard.news">
			<expression><![CDATA[((title)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="news_pkey" type="pk-constr" table="scoreboard.news">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="news_title_key" type="uq-constr" table="scoreboard.news">
		<columns names="title" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="eventseverity_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="eventseverity">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1783.43" y="1596.17"/>
	<column name="id" not-null="true" default-value="nextval('eventseverity_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="code" not-null="true">
		<type name="integer"/>
	</column>
	<column name="name" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="keyword" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="description">
		<type name="text"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_eventseverity_code" type="ck-constr" table="scoreboard.eventseverity">
			<expression><![CDATA[((code >= 0) AND (code <= 7))]]></expression>
	</constraint>
	<constraint name="valid_eventseverity_name" type="ck-constr" table="scoreboard.eventseverity">
			<expression><![CDATA[((name)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="valid_eventseverity_keyword" type="ck-constr" table="scoreboard.eventseverity">
			<expression><![CDATA[((keyword)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="eventseverity_pkey" type="pk-constr" table="scoreboard.eventseverity">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="eventseverity_code_key" type="uq-constr" table="scoreboard.eventseverity">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
	<constraint name="eventseverity_name_key" type="uq-constr" table="scoreboard.eventseverity">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
	<constraint name="eventseverity_keyword_key" type="uq-constr" table="scoreboard.eventseverity">
		<columns names="keyword" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="event_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="event">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1260.57" y="1596.17"/>
	<column name="id" not-null="true" default-value="nextval('event_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="severity" not-null="true">
		<type name="integer"/>
	</column>
	<column name="title" not-null="true">
		<type name="character varying" length="150"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="valid_title_name" type="ck-constr" table="scoreboard.event">
			<expression><![CDATA[((title)::text <> ''::text)]]></expression>
	</constraint>
	<constraint name="event_pkey" type="pk-constr" table="scoreboard.event">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="event_title_key" type="uq-constr" table="scoreboard.event">
		<columns names="title" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="settings_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="settings">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="71.5714" y="1230.46"/>
	<column name="id" not-null="true" default-value="nextval('settings_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="gamestartts" not-null="true">
		<type name="timestamp"/>
	</column>
	<column name="gameendts" not-null="true">
		<type name="timestamp"/>
	</column>
	<column name="teamstartmoney" not-null="true" default-value="0">
		<type name="money"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="settings_pkey" type="pk-constr" table="scoreboard.settings">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="bmitemstatus_history_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="scoreboard"/>
	<role name="owner"/>
</sequence>

<table name="bmitemstatus_history">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<position x="1880" y="887.714"/>
	<column name="id" not-null="true" default-value="nextval('bmitemstatus_history_id_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="bmitemid" not-null="true">
		<type name="integer"/>
	</column>
	<column name="statuscode" not-null="true">
		<type name="integer"/>
	</column>
	<column name="ts" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<constraint name="bmitemstatus_history_pkey" type="pk-constr" table="scoreboard.bmitemstatus_history">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<function name="emptytables"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'emptyTables()';

        TRUNCATE team,
                 flagStatus,
                 host,
                 flagCategory,
                 flagAuthor,
                 flag,
                 kingFlag,
                 team_flag,
                 team_kingFlag,
                 news,
                 submit_history,
                 flagStatus_history,
                 settings
            RESTART IDENTITY
            CASCADE;
        RETURN 0;
    END;
]]></definition>
</function>

<function name="sha256"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="IMMUTABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="sql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="text"/>
	</return-type>
	<parameter name="_param1">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    SELECT encode(pgcrypto.digest($1, 'sha256'), 'hex');
]]></definition>
</function>

<function name="random_64"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="sql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="text"/>
	</return-type>
	<definition><![CDATA[
    SELECT encode(pgcrypto.digest(random()::text, 'sha256'), 'hex');
    --SELECT encode(pgcrypto.digest(to_char(random(),'9.999999999999999'), 'sha256'), 'hex')
]]></definition>
</function>

<function name="random_32"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="sql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="text"/>
	</return-type>
	<definition><![CDATA[
    SELECT encode(pgcrypto.digest(random()::text, 'md5'), 'hex');
    --SELECT encode(pgcrypto.digest(to_char(random(),'9.999999999999999'), 'md5'), 'hex')
]]></definition>
</function>

<function name="idx"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="IMMUTABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="sql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_param1">
		<type name="anyarray"/>
	</parameter>
	<parameter name="_param2">
		<type name="anyelement"/>
	</parameter>
	<definition><![CDATA[
  SELECT i FROM (
     SELECT generate_series(array_lower($1,1),array_upper($1,1))
  ) g(i)
  WHERE $1[i] = $2
  LIMIT 1;
]]></definition>
</function>

<function name="transfermoney"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_srcwalletid">
		<type name="integer"/>
	</parameter>
	<parameter name="_dstwalletid">
		<type name="integer"/>
	</parameter>
	<parameter name="_amount">
		<type name="money"/>
	</parameter>
	<parameter name="_transactiontypecode">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'transferMoney(%,%,%,%)',$1,$2,$3,$4;

        -- Some checks
        PERFORM id FROM wallet WHERE id = _srcWalletId;
        if not FOUND then
            raise exception 'Could not find the source wallet "%"',_srcWalletId;
        end if;

        PERFORM id FROM wallet WHERE id = _dstWalletId;
        if not FOUND then
            raise exception 'Could not find the destination wallet "%"',_dstWalletId;
        end if;

        if _amount < 0::money then
            raise exception 'Cannot transfer negative value';
        end if;

        PERFORM code FROM transactionType WHERE code = _transactionTypeCode;
        if not FOUND then
            raise exception 'Could not find transaction type "%"',_transactionTypeCode;
        end if;

        -- Verify source wallet has enough money to transfer the amount
        PERFORM id,amount FROM wallet WHERE id = _srcWalletId and (amount - _amount) >= 0::money;
        if not FOUND then
            raise exception 'Sender does not have enough money';
        end if;

        -- Update source wallet
        UPDATE wallet
        SET amount = amount - _amount
        WHERE id = _srcWalletId;

        -- Update destination wallet
        UPDATE wallet
        SET amount = amount + _amount
        WHERE id = _dstWalletId;

        -- log in transaction table
        INSERT INTO transaction(srcWalletId,dstWalletId,amount,type) 
                VALUES(_srcWalletId,_dstWalletId,_amount,_transactionTypeCode);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="laundermoney"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_dstwalletid">
		<type name="integer"/>
	</parameter>
	<parameter name="_amount">
		<type name="money"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'launderMoney(%,%)',$1,$2;

        PERFORM transferMoney(1,_dstWalletId,_amount,5);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="laundermoneyfromteamid"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_teamid">
		<type name="integer"/>
	</parameter>
	<parameter name="_amount">
		<type name="money"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _dstWalletId wallet.id%TYPE;
    BEGIN
        -- Logging
        raise notice 'launderMoneyFromTeamId(%,%)',$1,$2;

        -- Get team wallet id
        SELECT wallet INTO _dstWalletId FROM team WHERE id = _teamId;
        if not FOUND then
            raise exception 'Could not find team "%"',_teamId;
        end if;

        -- Perform laundering
        PERFORM launderMoney(_dstWalletId,_amount);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addwallet"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_desc">
		<type name="text"/>
	</parameter>
	<parameter name="_amount">
		<type name="money"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _walletId wallet.id%TYPE;
    BEGIN
        -- Logging
        raise notice 'addWallet(%,%,%)',$1,$2,$3;

        -- Some checks
        if _name is null then
            raise exception 'Name cannot be null';
        end if;

        if _amount < 0::money then
            raise exception 'Wallet amount cannot be under 0';
        end if;

        -- Insert a new row
        INSERT INTO wallet(publicId,name,description,amount) VALUES(random_64(),_name,_desc,0::money);
        _walletId := LASTVAL();

        -- Perform first transaction if _amount > 0
        if _amount > 0::money then
            PERFORM transferMoney(1,_walletId,_amount,1);
        end if;

        RETURN _walletId;
    END;
]]></definition>
</function>

<function name="initbank"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_amount">
		<type name="money"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _bankWalletId wallet.id%TYPE := 1;
    BEGIN
        -- Logging
        raise notice 'initBank(%)',$1;

        if _amount < 0::money then
            raise exception 'Wallet amount cannot be under 0';
        end if;

        -- Create bank as Wallet #1
        PERFORM addWallet('Bank Wallet','Default wallet used for cash flags, money laundering, etc.',0::money);

        -- Set bank value
        UPDATE wallet
        SET amount = _amount
        WHERE id = _bankWalletId;

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addtransactiontype"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_code" default-value="''::text">
		<type name="integer"/>
	</parameter>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addTransactionType(%,%,%)',$1,$2,$3;

        -- Insert a new row
        INSERT INTO transactionType(code,name,description)
                VALUES(_code,_name,_description);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="gettransactionhistory"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="srcwallet">
		<type name="character varying"/>
	</parameter>
	<parameter name="dstwallet">
		<type name="character varying"/>
	</parameter>
	<parameter name="amount">
		<type name="money"/>
	</parameter>
	<parameter name="transactiontype">
		<type name="character varying"/>
	</parameter>
	<parameter name="ts">
		<type name="timestamp"/>
	</parameter>
	</return-type>
	<parameter name="_top" in="true" default-value="30">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'getTransactionHistory(%)',$1;

        -- Some check 
        if _top <= 0 then
            raise exception '_top argument cannot be a negative value. _top=%',_top;
        end if;

        RETURN QUERY SELECT
                            w1.name as srcWallet,
                            w2.name as dstWallet,
                            t.amount,
                            tt.name as transactionType,
                            t.ts
                     FROM transaction as t
                     LEFT OUTER JOIN (
                         SELECT id,
                                name
                         FROM wallet
                     ) AS w1 ON t.srcWalletId= w1.id
                     LEFT OUTER JOIN (
                         SELECT id,
                                name
                         FROM wallet
                     ) AS w2 ON t.dstWalletId= w2.id
                     LEFT OUTER JOIN (
                         SELECT id,
                                name
                         FROM transactionType
                     ) AS tt ON t.type= tt.id
                     ORDER BY t.ts
                    LIMIT _top;
    END;
]]></definition>
</function>

<function name="getteamtransactionhistory"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="srcwallet">
		<type name="character varying"/>
	</parameter>
	<parameter name="dstwallet">
		<type name="character varying"/>
	</parameter>
	<parameter name="amount">
		<type name="money"/>
	</parameter>
	<parameter name="transactiontype">
		<type name="character varying"/>
	</parameter>
	<parameter name="ts">
		<type name="timestamp"/>
	</parameter>
	</return-type>
	<parameter name="_teamid" in="true" default-value="30">
		<type name="integer"/>
	</parameter>
	<parameter name="_top" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _walletId wallet.id%TYPE;
    BEGIN
        -- Logging
        raise notice 'getTeamTransactionHistory(%,%)',$1,$2;

        -- Some check 
        if _top <= 0 then
            raise exception '_top argument cannot be a negative value. _top=%',_top;
        end if;

        -- Get walletId from teamId
        SELECT wallet INTO _walletId FROM team WHERE id = _teamId;

        -- Get history
        RETURN QUERY SELECT
                            w1.name as srcWallet,
                            w2.name as dstWallet,
                            t.amount,
                            tt.name as transactionType,
                            t.ts
                     FROM transaction as t
                     LEFT OUTER JOIN (
                         SELECT id,
                                name
                         FROM wallet
                     ) AS w1 ON t.srcWalletId= w1.id
                     LEFT OUTER JOIN (
                         SELECT id,
                                name
                         FROM wallet
                     ) AS w2 ON t.dstWalletId= w2.id
                     LEFT OUTER JOIN (
                         SELECT id,
                                name
                         FROM transactionType
                     ) AS tt ON t.type= tt.id
                     WHERE t.srcWalletId = _walletId OR t.dstWalletId = _walletId
                     ORDER BY t.ts
                     LIMIT _top;
    END;
]]></definition>
</function>

<function name="addteam"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_net">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _inet inet;
        _walletId wallet.id%TYPE;
        _teamStartMoney settings.teamStartMoney%TYPE;
    BEGIN
        -- Logging
        raise notice 'addTeam(%,%)',$1,$2;

        _inet := _net::inet;

        -- Some checks
        if _name is null then
            raise exception 'Name cannot be null';
        end if;

        if family(_inet) <> 4 then
            raise exception 'Only IPv4 addresses are supported';
        end if;

        -- Get team starting money
        SELECT teamStartMoney into _teamStartMoney FROM settings ORDER BY ts DESC LIMIT 1;

        -- Create wallet
        _walletId := addWallet(_name,'Wallet of team: '||_name,_teamStartMoney);

        -- Insert a new row
        INSERT INTO team(name,net,wallet) VALUES(_name,_inet,_walletId);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="modteam"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_id">
		<type name="integer"/>
	</parameter>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_net">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _inet inet;
    BEGIN
        -- Logging
        raise notice 'modTeam(%,%,%)',$1,$2,$3;

        _inet := _net::inet;

        -- Some checks
        if _id is null or _id < 1 then
            raise exception 'ID cannot be null or lower than 1';
        end if;

        if _name is null or _name = '' then
            raise exception 'Name cannot be null';
        end if;

        if family(_inet) <> 4 then
            raise exception 'Only IPv4 addresses are supported';
        end if;

        -- Update
        UPDATE team 
        SET name=_name,net=_inet
        WHERE id=_id;
        IF not found THEN
            raise exception 'Could not find team with id %i', _id;
            RETURN 1;
        END IF;

        RETURN 0;
    END;
]]></definition>
</function>

<function name="listteams"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="team">
		<type name="character varying"/>
	</parameter>
	<parameter name="net">
		<type name="character varying"/>
	</parameter>
	<parameter name="flagpts">
		<type name="integer"/>
	</parameter>
	<parameter name="kingflagpts">
		<type name="integer"/>
	</parameter>
	<parameter name="flagtotal">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="_top" in="true" default-value="30">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'listTeam(%)',$1;
    
        if _top <= 0 then
            raise exception '_top argument cannot be a negative value. _top=%',_top;
        end if;
        return QUERY SELECT t.id AS id,
                            t.name AS team,
                            t.net::varchar AS net,
                            coalesce(tf3.sum::integer,0) AS flagPts,
                            coalesce(tfi3.sum::integer,0) AS kingFlagPts,
                            (coalesce(tf3.sum::integer,0) + coalesce(tfi3.sum::integer,0)) AS flagTotal 
                     FROM team AS t
                     LEFT OUTER JOIN (
                        SELECT tf2.teamId,
                               sum(tf2.pts) AS sum
                        FROM (
                            SELECT tf.flagId,
                                   tf.teamId,
                                   f.pts
                            FROM team_flag as tf
                            LEFT OUTER JOIN (
                                SELECT flag.id,
                                       flag.pts
                                FROM flag
                                ) as f ON tf.flagId = f.id
                            ) AS tf2
                        GROUP BY tf2.teamId
                        ) AS tf3 ON t.id = tf3.teamId
                     LEFT OUTER JOIN (
                        SELECT tfi2.teamId,
                               sum(tfi2.pts) AS sum
                        FROM (
                            SELECT tfi.kingFlagId,
                                   tfi.teamId,
                                   fi.pts
                            FROM team_kingFlag as tfi
                            LEFT OUTER JOIN (
                                SELECT kingFlag.id,
                                       kingFlag.pts
                                FROM kingFlag
                                ) as fi ON tfi.kingFlagId = fi.id
                            ) AS tfi2
                        GROUP BY tfi2.teamId
                        ) AS tfi3 ON t.id = tfi3.teamId
                     ORDER BY t.id 
                     LIMIT _top;
    END;
]]></definition>
</function>

<function name="rewardteam"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_teamid">
		<type name="integer"/>
	</parameter>
	<parameter name="_desc">
		<type name="character varying"/>
	</parameter>
	<parameter name="_pts">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _newsMsg news.title%TYPE;
        _teamNet team.net%TYPE;
        _teamName team.name%TYPE;
        _flagId flag.id%TYPE;
        _flagName flag.name%TYPE;
    BEGIN
        -- Logging
        raise notice 'rewardTeam(%,%,%)',$1,$2,$3;

        SELECT name,net INTO _teamName,_teamNet FROM team WHERE id = _teamId;
        if not FOUND then
            raise exception 'Could not find team "%"',_teamId;
        end if;

        -- Generate flag
        _flagName := 'Bug Bounty'||current_timestamp::varchar;
        PERFORM addRandomFlag(_flagName, _pts, 'scoreboard.hf', 'bug', 
                 1::smallint, Null, 'HF Crew', False, _desc);

        -- Assign flag
        SELECT id INTO _flagId FROM flag WHERE name = _flagName LIMIT 1;
        raise notice 'team net: %s',_teamNet+1;
        INSERT INTO team_flag(teamId,flagId,playerIp)
               VALUES(_teamId, _flagId,_teamNet+1);

        -- Create news
        _newsMsg := 'Thanks to '||_teamName||' for raising an issue to admins ('||_pts||' pts)';
        PERFORM addNews(_newsMsg,current_timestamp::timestamp);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addflagstatus"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_code" default-value="''::text">
		<type name="integer"/>
	</parameter>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addFlagStatus(%,%,%)',$1,$2,$3;

        -- Insert a new row
        INSERT INTO flagStatus(code,name,description)
                VALUES(_code,_name,_description);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addflagcategory"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name" default-value="false">
		<type name="character varying"/>
	</parameter>
	<parameter name="_displayname">
		<type name="character varying"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<parameter name="_hidden">
		<type name="boolean"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addFlagCategory(%,%,%,%)',$1,$2,$3,$4;

        -- Insert a new row
        INSERT INTO flagCategory(name,displayName,description,hidden)
                VALUES(_name,_displayName,_description,_hidden);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addnews"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_title" default-value="now()">
		<type name="character varying"/>
	</parameter>
	<parameter name="_displayts">
		<type name="timestamp"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addNews(%,%)',$1,$2;

        -- Insert a new row
        INSERT INTO news(title,displayTs)
                VALUES(_title,_displayTs);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addnews"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_title" default-value="(now())::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_displayts">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addNews(%,%)',$1,$2;

        -- Some validations
        if _displayTs is null then
            _displayTs := current_timestamp;        -- Kinda redundant...
        end if;

        -- Insert a new row
        INSERT INTO news(title,displayTs)
                VALUES(_title,_displayTs::timestamp);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="modnews"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_id" default-value="(now())::character varying">
		<type name="integer"/>
	</parameter>
	<parameter name="_title">
		<type name="character varying"/>
	</parameter>
	<parameter name="_displayts">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'modNews(%,%,%)',$1,$2,$3;

        -- Some validations
        if _id is null or _id < 1 then
            raise exception 'ID cannot be null or lower than 1';
        end if;

        if _title is null or _title = '' then
            raise exception 'Title cannot be null';
        end if;

        if _displayTs is null then
            _displayTs := current_timestamp;        -- Kinda redundant...
        end if;

        -- Update
        UPDATE news 
        SET title=_title,displayTs=_displayTs
        WHERE id=_id;
        IF not found THEN
            raise exception 'Could not find news with id %i', _id;
            RETURN 1;
        END IF;

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addhost"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name" default-value="''::text">
		<type name="character varying"/>
	</parameter>
	<parameter name="_os">
		<type name="character varying"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addHost(%,%,%)',$1,$2,$3;

        -- Insert a new row
        INSERT INTO host(name,os,description)
                VALUES(_name,_os,_description);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addauthor"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_nick">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addAuthor(%,%)',$1,$2;

        -- Insert a new row
        INSERT INTO flagAuthor(name,nick)
                VALUES(_name,_nick);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addflagtype"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_code">
		<type name="integer"/>
	</parameter>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addFlagType(%,%)',$1,$2;

        -- Insert a new row
        INSERT INTO flagType(code,name)
                VALUES(_code,_name);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addflag"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name" default-value="1">
		<type name="character varying"/>
	</parameter>
	<parameter name="_value" default-value="NULL::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_pts" default-value="NULL::character varying">
		<type name="integer"/>
	</parameter>
	<parameter name="_host" default-value="NULL::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_category" default-value="false">
		<type name="character varying"/>
	</parameter>
	<parameter name="_statuscode" default-value="''::text">
		<type name="integer"/>
	</parameter>
	<parameter name="_displayinterval" default-value="''::text">
		<type name="character varying"/>
	</parameter>
	<parameter name="_author" default-value="''::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_type" default-value="''::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_isking">
		<type name="boolean"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<parameter name="_hint">
		<type name="text"/>
	</parameter>
	<parameter name="_updatecmd">
		<type name="character varying"/>
	</parameter>
	<parameter name="_monitorcmd">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _hostId host.id%TYPE;
        _catId flagCategory.id%TYPE;
        _authorId flagAuthor.id%TYPE;
        _typeId flagType.id%TYPE;
        _display flag.displayInterval%TYPE;
    BEGIN
        -- Logging
        raise notice 'addFlag(%,%,%,%,%,%,%,%,%,%,%,%,%,%)',$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14;    
    
        -- Get host id from name
        SELECT id INTO _hostId FROM host WHERE name = _host;
        if not FOUND then
            raise exception 'Could not find host "%"',_host;
        end if;

        -- Get category id from name
        SELECT id INTO _catId FROM flagCategory WHERE name = _category;
        if not FOUND then
            raise exception 'Could not find category "%"',_category;
        end if;

        -- Get author id from name
        if _author is not Null then
            SELECT id INTO _authorId FROM flagAuthor WHERE name = _author;
            if not FOUND then
                raise exception 'Could not find author "%"',_author;
            end if;
        else
            _authorId = _author;
        end if;

        -- Get type id from name
        if _type is not Null then
            SELECT id INTO _typeId FROM flagType WHERE name = _type;
            if not FOUND then
                raise exception 'Could not find flag type "%"',_type;
            end if;
        else
            _typeId = _type;
        end if;

        -- Convert displayInterval
        if _displayInterval is not Null then
            _display = _displayInterval::interval;
        else
            _display = _displayInterval;
        end if;

        
        -- Insert a new row
        INSERT INTO flag(name,value,pts,host,category,statusCode,displayInterval,author,type,
                        description,hint,isKing,updateCmd,monitorCmd)
                VALUES(_name,_value,_pts,_hostId,_catId,_statusCode,_display,_authorId,_typeId,
                        _description,_hint,_isKing,_updateCmd,_monitorCmd);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addrandomflag"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="character varying"/>
	</return-type>
	<parameter name="_name" default-value="1">
		<type name="character varying"/>
	</parameter>
	<parameter name="_pts" default-value="NULL::character varying">
		<type name="integer"/>
	</parameter>
	<parameter name="_host" default-value="NULL::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_category" default-value="NULL::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_statuscode" default-value="false">
		<type name="integer"/>
	</parameter>
	<parameter name="_displayinterval" default-value="''::text">
		<type name="character varying"/>
	</parameter>
	<parameter name="_author" default-value="''::text">
		<type name="character varying"/>
	</parameter>
	<parameter name="_type" default-value="''::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_isking" default-value="''::character varying">
		<type name="boolean"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<parameter name="_hint">
		<type name="text"/>
	</parameter>
	<parameter name="_updatecmd">
		<type name="character varying"/>
	</parameter>
	<parameter name="_monitorcmd">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _flagValue flag.value%TYPE;
    BEGIN
        -- Logging
        raise notice 'addRandomFlag(%,%,%,%,%,%,%,%,%,%,%,%,%)',1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13;    

        -- Loop just to be sure that we get no collision with random_32()
        LOOP
            BEGIN
                -- Generate a king flag
                SELECT random_32() INTO _flagValue;

                -- addFlag
                PERFORM addFlag(_name,_flagValue,_pts,_host,_category,
                                _statusCode,_displayInterval,_author,_type,_isKing,_description,
                                _hint,_updateCmd,_monitorCmd);

                RETURN _flagValue;
            EXCEPTION WHEN unique_violation THEN
                -- Do nothing, and loop to try the addKingFlag again.
                raise notice 'A collision occured';
            END;
        END LOOP;
    END;
]]></definition>
</function>

<function name="addkingflagfromid"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_flagid">
		<type name="integer"/>
	</parameter>
	<parameter name="_value">
		<type name="character varying"/>
	</parameter>
	<parameter name="_pts">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addKingFlagFromId(%,%,%)',1,$2,$3;
    
        INSERT INTO kingFlag(flagId,value,pts)
                VALUES(_flagId,_value,_pts);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addkingflagfromname"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_flagname">
		<type name="character varying"/>
	</parameter>
	<parameter name="_value">
		<type name="character varying"/>
	</parameter>
	<parameter name="_pts">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _flagId flag.id%TYPE := Null;
    BEGIN
        -- Logging
        raise notice 'addKingFlagFromName(%,%,%)',1,$2,$3;
    
        -- Get flag id from name
        SELECT id INTO _flagId FROM flag WHERE name = _flagName;

        -- Add the flag
        RETURN addKingFlagFromId(_flagId,_value,_pts);
    END;
]]></definition>
</function>

<function name="addrandomkingflagfromid"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="character"/>
	</return-type>
	<parameter name="_flagid">
		<type name="integer"/>
	</parameter>
	<parameter name="_pts">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _flagValue flag.value%TYPE;
    BEGIN
        -- Logging
        raise notice 'addRandomKingFlagFromId(%,%)',$1,$2;
   
        -- Loop just to be sure that we get no collision with random_32()
        LOOP
            BEGIN
                -- Generate a king flag
                SELECT random_32() INTO _flagValue;
        
                -- Add king flag 
                PERFORM addKingFlagFromId(_flagId,_flagValue,_pts);

                RETURN _flagValue;
            EXCEPTION WHEN unique_violation THEN
                -- Do nothing, and loop to try the addKingFlag again.
                raise notice 'A collision occured';
            END;
        END LOOP;
    END;
]]></definition>
</function>

<function name="listflags"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="name">
		<type name="character varying"/>
	</parameter>
	<parameter name="pts">
		<type name="integer"/>
	</parameter>
	<parameter name="category">
		<type name="character varying"/>
	</parameter>
	<parameter name="author">
		<type name="character varying"/>
	</parameter>
	<parameter name="displayinterval">
		<type name="interval"/>
	</parameter>
	<parameter name="description">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="_top" in="true" default-value="30">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[

    BEGIN
        return QUERY SELECT f.id AS id,
                            f.name AS name,
                            f.pts AS pts,
                            c.name AS catName,
                            a.nick as author,
                            f.displayInterval,
                            f.description AS description
                     FROM flag AS f
                     LEFT OUTER JOIN (
                        SELECT a.id, a.nick
                        FROM flagAuthor AS a
                        ) AS a ON f.author = a.id
                     LEFT OUTER JOIN (
                        SELECT c.id, c.name, c.hidden
                        FROM flagCategory AS c
                        ) AS c ON f.category = c.id
                    ORDER BY f.id;
    END;
]]></definition>
</function>

<function name="logsubmit"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_playeripstr">
		<type name="character varying"/>
	</parameter>
	<parameter name="_flagvalue">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _playerIp inet;
        _teamId team.id%TYPE;
    BEGIN
        -- Logging
        raise notice 'logSubmit(%,%)',$1,$2;

        _playerIp := _playerIpStr::inet;

        -- Get team from userIp 
        SELECT id INTO _teamId FROM team WHERE _playerIp << net ORDER BY id DESC LIMIT 1;
        if NOT FOUND then
            raise exception 'Team not found for %',_playerIp;
        end if;

        -- Save attempt in submit_history table
        INSERT INTO submit_history(teamId,playerIp,value)
                VALUES(_teamId,_playerIp,_flagValue);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="submitflagfromip"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_playeripstr">
		<type name="character varying"/>
	</parameter>
	<parameter name="_flagvalue">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _teamRec team%ROWTYPE;
        _flagRec RECORD;
        _rowCount smallint;
        _teamAttempts smallint;
        _playerIp inet;
        _settings settings%ROWTYPE;
        ANTI_BF_INT interval := '20 second';
        ANTI_BF_LIMIT integer := 20;
        STATUS_CODE_OK integer := 1;
        FLAG_MAX_LENGTH integer := 64;
    BEGIN
        -- Logging
        raise notice 'submitFlagFromIp(%,%)',$1,$2;
    
        _playerIp := _playerIpStr::inet;

        -- Get settings
        SELECT * INTO _settings FROM settings ORDER BY ts DESC LIMIT 1;

        -- Check time. Players can submit only if game is started
        if _settings.gameStartTs > current_timestamp then
            raise exception 'Game is not started yet. Game will start at: %',_settings.gameStartTs;
        end if;

        -- Get team from userIp 
        SELECT id,net INTO _teamRec FROM team where _playerIp << net ORDER BY id DESC LIMIT 1;
        if NOT FOUND then
            raise exception 'Team not found for %',_playerIp;
        end if;

        -- Validate flag max length
        if length(_flagValue) > FLAG_MAX_LENGTH then
            raise exception 'Flag too long';
        end if;

        --Remove because it was rollbacked for invalid flags.
        -- Save attempt in submit_history table
        --PERFORM logSubmit(_teamRec.id,_playerIp,_flagValue);
        --INSERT INTO submit_history(teamId,playerIp,value)
        --        VALUES(_teamRec.id,_playerIp,_flagValue);

        -- Anti-bruteforce
        SELECT count(*)
        INTO _rowCount
        FROM (
            SELECT teamId,ts
            FROM submit_history
            WHERE teamId = _teamRec.id 
                AND ts + ANTI_BF_INT > current_timestamp
            ) as hist;
        if _rowCount > ANTI_BF_LIMIT then
            raise exception 'Anti-Bruteforce: Limit reached! (% attempts per team every %)',ANTI_BF_LIMIT,ANTI_BF_INT::text;
        end if;

        -- Search for the flag in flag and kingFlag tables
        -- Flag statusCode must be equal 1
        -- category 1 = flag, category 2 = kingFlag
        SELECT * FROM (
            SELECT id,value,pts,statusCode,1 AS category FROM flag WHERE statusCode = STATUS_CODE_OK and value = _flagValue and isKing = False
            UNION ALL
            SELECT id,value,pts,Null,2 AS category FROM kingFlag WHERE value = _flagValue
        ) AS x INTO _flagRec;

        -- if the flag is found, determine if it is a flag or a kingFlag
        GET DIAGNOSTICS _rowCount = ROW_COUNT;
        if _rowCount = 1 then
            if _flagRec.category = 1 then
                INSERT INTO team_flag(teamId,flagId,playerIp)
                        VALUES(_teamRec.id, _flagRec.id,_playerIp);
            elsif _flagRec.category = 2 then
                INSERT INTO team_kingFlag(teamId,kingFlagId,playerIp)
                        VALUES(_teamRec.id, _flagRec.id,_playerIp);
            end if;
            RETURN _flagRec.pts;
        else
            raise exception 'Invalid flag';
            RETURN 0;
        end if;

    END;
]]></definition>
</function>

<function name="getscore"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="team">
		<type name="character varying"/>
	</parameter>
	<parameter name="flagpts">
		<type name="integer"/>
	</parameter>
	<parameter name="kingflagpts">
		<type name="integer"/>
	</parameter>
	<parameter name="flagtotal">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="_top" in="true" default-value="30">
		<type name="integer"/>
	</parameter>
	<parameter name="_timestamp" in="true" default-value="NULL::character varying">
		<type name="character varying"/>
	</parameter>
	<parameter name="_category" in="true" default-value="NULL::character varying">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _settings settings%ROWTYPE;
        _ts timestamp;
        -- _aCat flagCategory.id%TYPE[];    -- This doesn't work :(
        _aCat integer[];
        _rowCount integer;
    BEGIN
        -- Logging
        if _timestamp is null then          -- Tmp bypass because it logs too much
            raise notice 'getScore(%,%)',$1,$2;
        end if;
   
        -- Get settings
        SELECT * INTO _settings FROM settings ORDER BY ts DESC LIMIT 1;

        -- Check time. Players can submit only if game is started
        if _settings.gameStartTs > current_timestamp then
            raise exception 'Game is not started yet. Game will start at: %',_settings.gameStartTs;
        end if;

        -- Some check 
        if _top <= 0 then
            raise exception '_top argument cannot be a negative value. _top=%',_top;
        end if;

        -- Prepare filters
        if _timestamp is Null then
            _ts := current_timestamp;
        else
            _ts := _timestamp::timestamp;
        end if;

        if _category is Null then
            SELECT array(select flagCategory.id from flagCategory) INTO _aCat;
        else
            SELECT array[flagCategory.id] INTO _aCat FROM flagCategory WHERE name = _category;
            GET DIAGNOSTICS _rowCount = ROW_COUNT;
            if _rowCount <> 1 then
                raise exception 'Category "%" not found',_category;
            end if;
        end if;

        return QUERY SELECT t.id AS id,
                            t.name AS team,
                            coalesce(tf3.sum::integer,0) AS flagPts,
                            coalesce(tfi3.sum::integer,0) AS kingFlagPts,
                            (coalesce(tf3.sum::integer,0) + coalesce(tfi3.sum::integer,0)) AS flagTotal
                         FROM team AS t
                         LEFT OUTER JOIN (
                            SELECT tf2.teamId,
                                   sum(tf2.pts) AS sum
                            FROM (
                                SELECT tf.flagId,
                                       tf.teamId,
                                       tf.ts,
                                       f.pts
                                FROM team_flag as tf
                                LEFT OUTER JOIN (
                                    SELECT flag.id,
                                           flag.pts,
                                           flag.category
                                    FROM flag
                                    ) as f ON tf.flagId = f.id
                                    WHERE f.category = ANY (_aCat)
                                ) AS tf2
                                WHERE tf2.ts <= _ts
                            GROUP BY tf2.teamId
                            ) AS tf3 ON t.id = tf3.teamId
                         LEFT OUTER JOIN (
                            SELECT tfi2.teamId,
                                   sum(tfi2.pts) AS sum
                            FROM (
                                SELECT tfi.kingFlagId,
                                       tfi.teamId,
                                       tfi.ts,
                                       fi.pts
                                FROM team_kingFlag as tfi
                                LEFT OUTER JOIN (
                                    SELECT kf.id,
                                           kf.flagId,
                                           kf.pts
                                    FROM kingFlag as kf
                                    LEFT OUTER JOIN (
                                        SELECT flag.id,
                                               flag.category
                                        FROM flag 
                                        ) as ff ON kf.flagId = ff.id
                                        WHERE ff.category = ANY (_aCat)
                                    ) as fi ON tfi.kingFlagId = fi.id
                                ) AS tfi2
                                WHERE tfi2.ts <= _ts
                            GROUP BY tfi2.teamId
                            ) AS tfi3 ON t.id = tfi3.teamId
                         ORDER BY flagTotal DESC
                         LIMIT _top;
    END;
]]></definition>
</function>

<function name="getflagvaluefromname"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="character varying"/>
	</return-type>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _flagRec RECORD;
        _rowCount smallint;
    BEGIN
        -- Logging
        raise notice 'getFlagValueFromName(%)',$1;
    
        SELECT name,value INTO _flagRec FROM flag where name = _name LIMIT 1;
        --GET DIAGNOSTICS rowCount = ROW_COUNT;
        if not FOUND then
            raise exception 'Could not find flag "%".',_name;
        end if;

        RETURN _flagRec.value;
    END;
]]></definition>
</function>

<function name="getcatprogressfromip"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="name">
		<type name="character varying"/>
	</parameter>
	<parameter name="displayname">
		<type name="character varying"/>
	</parameter>
	<parameter name="description">
		<type name="text"/>
	</parameter>
	<parameter name="pts">
		<type name="integer"/>
	</parameter>
	<parameter name="total">
		<type name="integer"/>
	</parameter>
	<parameter name="hidden">
		<type name="boolean"/>
	</parameter>
	</return-type>
	<parameter name="_playerip" in="true">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _teamId team.id%TYPE;
        _iPlayerIp inet;
        _settings settings%ROWTYPE;
    BEGIN
        -- Logging
        raise notice 'getCatProgressFromIp(%)',$1;

        -- Get settings
        SELECT * INTO _settings FROM settings ORDER BY ts DESC LIMIT 1;

        -- Check time. Players can submit only if game is started
        if _settings.gameStartTs > current_timestamp then
            raise exception 'Game is not started yet. Game will start at: %',_settings.gameStartTs;
        end if;

        -- Get team ID from client address
        _iPlayerIp := _playerIp::inet;
        SELECT team.id INTO _teamId FROM team WHERE _iPlayerIp << net LIMIT 1;
        if NOT FOUND then
            raise exception 'Team not found for %.',_iPlayerIp;
        end if;
    
        return QUERY SELECT c.id AS id,
                            c.name AS name,
                            c.displayName AS displayName,
                            c.description AS description,
                            coalesce(tf3.sum::integer,0) AS pts,
                            coalesce(tft3.sum::integer,0) AS total,
                            c.hidden as hidden
                     FROM flagCategory AS c
                     LEFT OUTER JOIN (
                        SELECT tf2.category,
                               sum(tf2.pts) AS sum
                        FROM (
                            SELECT tf.flagId,
                                   tf.teamId,
                                   f.category,
                                   f.pts
                            FROM team_flag AS tf
                            LEFT OUTER JOIN (
                                SELECT f.id,
                                       f.category,
                                       f.pts
                                FROM flag AS f
                                WHERE f.isKing = False
                                ) as f ON tf.flagId = f.id
                            WHERE tf.teamId = _teamId
                            ) AS tf2
                        GROUP BY tf2.category
                        ) AS tf3 ON c.id = tf3.category
                     LEFT OUTER JOIN (
                         SELECT f2.category,
                                sum(f2.pts) AS sum
                         FROM flag AS f2
                         WHERE f2.isKing = False
                         GROUP BY f2.category
                        ) AS tft3 ON c.id = tft3.category
                     WHERE c.hidden = False
                     ORDER BY c.name;
    END;
]]></definition>
</function>

<function name="getflagprogressfromip"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="name">
		<type name="character varying"/>
	</parameter>
	<parameter name="description">
		<type name="text"/>
	</parameter>
	<parameter name="pts">
		<type name="integer"/>
	</parameter>
	<parameter name="catid">
		<type name="integer"/>
	</parameter>
	<parameter name="catname">
		<type name="character varying"/>
	</parameter>
	<parameter name="isdone">
		<type name="boolean"/>
	</parameter>
	<parameter name="author">
		<type name="character varying"/>
	</parameter>
	<parameter name="displayinterval">
		<type name="interval"/>
	</parameter>
	</return-type>
	<parameter name="_playerip" in="true">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE 
        _teamId team.id%TYPE;
        _iPlayerIp inet;
        _settings settings%ROWTYPE;
    BEGIN
        -- Logging
        raise notice 'getFlagProgressFromIp(%)',$1;

        -- Get settings
        SELECT * INTO _settings FROM settings ORDER BY ts DESC LIMIT 1;

        -- Check time. Players can submit only if game is started
        if _settings.gameStartTs > current_timestamp then
            raise exception 'Game is not started yet. Game will start at: %',_settings.gameStartTs;
        end if;

        -- Get team ID from client address
        _iPlayerIp := _playerIp::inet;
        SELECT team.id INTO _teamId FROM team WHERE _iPlayerIp << net LIMIT 1;
        if NOT FOUND then
            raise exception 'Team not found for %.',_iPlayerIp;
        end if;

    
        return QUERY SELECT f.id AS id,
                            f.name AS name,
                            f.description AS description,
                            f.pts AS pts,
                            f.category AS catId,
                            c.name AS catName,
                            tf2.teamId IS NOT Null AS isDone,
                            a.nick as author,
                            f.displayInterval
                     FROM flag AS f
                     LEFT OUTER JOIN (
                        SELECT a.id, a.nick
                        FROM flagAuthor AS a
                        ) AS a ON f.author = a.id
                     LEFT OUTER JOIN (
                        SELECT c.id, c.name, c.hidden
                        FROM flagCategory AS c
                        ) AS c ON f.category = c.id
                     LEFT OUTER JOIN (
                         SELECT tf.flagId,
                                tf.teamId
                         FROM team_flag AS tf
                         WHERE tf.teamId = _teamId
                         ) AS tf2 ON f.id = tf2.flagId
                    WHERE (f.displayInterval is null 
                            or _settings.gameStartTs + f.displayInterval < current_timestamp)
                          and f.isKing = False
                          and c.hidden = False
                    ORDER BY f.name;
    END;
]]></definition>
</function>

<function name="getallkingflags"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="name">
		<type name="character varying"/>
	</parameter>
	<parameter name="host">
		<type name="character varying"/>
	</parameter>
	<parameter name="updatecmd">
		<type name="character varying"/>
	</parameter>
	<parameter name="statuscode">
		<type name="integer"/>
	</parameter>
	<parameter name="isking">
		<type name="boolean"/>
	</parameter>
	</return-type>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'getAllKingFlags()';
    
        return QUERY SELECT f.id,
                            f.name,
                            h.name AS host,
                            f.updateCmd,
                            f.statusCode,
                            f.isKing 
                     FROM flag AS f
                     LEFT OUTER JOIN (
                        SELECT host.id,
                               host.name
                        FROM host
                        ) AS h ON h.id = f.host
                     WHERE f.isKing = True;
    END;
]]></definition>
</function>

<function name="getkingflagsfromhost"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="name">
		<type name="character varying"/>
	</parameter>
	<parameter name="host">
		<type name="character varying"/>
	</parameter>
	<parameter name="updatecmd">
		<type name="character varying"/>
	</parameter>
	<parameter name="statuscode">
		<type name="integer"/>
	</parameter>
	<parameter name="isking">
		<type name="boolean"/>
	</parameter>
	</return-type>
	<parameter name="_host" in="true">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'getKingFlagsFromHost(%)',$1;
    
        return QUERY SELECT f.id,
                            f.name,
                            h.name AS host,
                            f.updateCmd,
                            f.statusCode,
                            f.isKing 
                     FROM flag AS f
                     LEFT OUTER JOIN (
                        SELECT host.id,
                               host.name
                        FROM host
                        ) AS h ON h.id = f.host
                     WHERE f.isKing = True and h.name = _host;
    END;
]]></definition>
</function>

<function name="getkingflagsfromname"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="name">
		<type name="character varying"/>
	</parameter>
	<parameter name="host">
		<type name="character varying"/>
	</parameter>
	<parameter name="updatecmd">
		<type name="character varying"/>
	</parameter>
	<parameter name="statuscode">
		<type name="integer"/>
	</parameter>
	<parameter name="isking">
		<type name="boolean"/>
	</parameter>
	</return-type>
	<parameter name="_name" in="true">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'getKingFlagsFromName(%)',$1;
    
        return QUERY SELECT f.id,
                            f.name,
                            h.name AS host,
                            f.updateCmd,
                            f.statusCode,
                            f.isKing 
                     FROM flag AS f
                     LEFT OUTER JOIN (
                        SELECT host.id,
                               host.name
                        FROM host
                        ) AS h ON h.id = f.host
                     WHERE f.isKing = True and f.name = _name;
    END;
]]></definition>
</function>

<function name="getnews"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="displayts">
		<type name="timestamp"/>
	</parameter>
	<parameter name="title">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<definition><![CDATA[
    DECLARE
        _settings settings%ROWTYPE;
    BEGIN
        -- Logging
        raise notice 'getNews()';

        -- Get settings
        SELECT * INTO _settings FROM settings ORDER BY ts DESC LIMIT 1;

        -- Check time. Players can submit only if game is started
        if _settings.gameStartTs > current_timestamp then
            raise exception 'Game is not started yet. Game will start at: %',_settings.gameStartTs;
        end if;

        RETURN QUERY SELECT news.id,
                            news.displayTs,
                            news.title
                     FROM news
                     WHERE news.displayTs < current_timestamp
                     ORDER BY news.id DESC;
    END;
]]></definition>
</function>

<function name="getteaminfofromip"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="info">
		<type name="character varying"/>
	</parameter>
	<parameter name="value">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<parameter name="_playeripstr" in="true">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _rowCount integer;
        _playerIp inet;
        _teamRec team%ROWTYPE;
        _activePlayerCt integer;
        _teamFlagSubmitCt integer;
        _playerFlagSubmitCt integer;
        _teamScore flag.pts%TYPE;
        _teamMoney wallet.amount%TYPE;
    BEGIN
        -- Logging
        raise notice 'getTeamInfoFromIp(%)',$1;

        _playerIp := _playerIpStr::inet;

        -- Get team informations
        SELECT id,name,net 
        INTO _teamRec 
        FROM team 
        WHERE _playerIp << team.net
        LIMIT 1;
        GET DIAGNOSTICS _rowCount = ROW_COUNT;
        if _rowCount <> 1 then
            raise exception 'Team not found.';
        end if;

        -- Get active players count;
        PERFORM playerip
        FROM submit_history 
        WHERE playerip << _teamRec.net
        GROUP BY playerip;
        GET DIAGNOSTICS _activePlayerCt = ROW_COUNT;

        -- Get player submitted flag count
        SELECT count(*)
        INTO _teamFlagSubmitCt
        FROM submit_history 
        WHERE playerip << _teamRec.net;
        
        -- Get team submitted flag count
        SELECT count(*)
        INTO _playerFlagSubmitCt
        FROM submit_history 
        WHERE playerip = _playerIp;

        -- Get team score
        SELECT sum(sum) AS total
        INTO _teamScore
        FROM (
                SELECT sum(tf2.pts) AS sum
                FROM (
                    SELECT tf.flagId,
                           tf.teamId,
                           f.pts
                    FROM team_flag as tf
                    LEFT OUTER JOIN (
                        SELECT flag.id,
                               flag.pts
                        FROM flag
                        ) as f ON tf.flagId = f.id
                    ) AS tf2
                    WHERE tf2.teamId = _teamRec.id
                UNION
                SELECT sum(tfi2.pts) AS sum
                FROM (
                    SELECT tfi.kingFlagId,
                           tfi.teamId,
                           fi.pts
                    FROM team_kingFlag as tfi
                    LEFT OUTER JOIN (
                        SELECT kingFlag.id,
                               kingFlag.pts
                        FROM kingFlag
                        ) as fi ON tfi.kingFlagId = fi.id
                    ) AS tfi2
                    WHERE tfi2.teamId = _teamRec.id
                ) as score;

        -- Get team money
        SELECT w.amount
        INTO _teamMoney
        FROM team
        LEFT OUTER JOIN (
            SELECT id,
                   amount
            FROM wallet
        ) AS w ON team.wallet = w.id
        WHERE team.id = _teamRec.id;
        
        -- Return
        RETURN QUERY SELECT 'ID'::varchar, _teamRec.id::varchar
                     UNION ALL SELECT 'Name'::varchar, _teamRec.name
                     UNION ALL SELECT 'Net'::varchar, _teamRec.net::varchar
                     UNION ALL SELECT 'Active Players'::varchar, _activePlayerCt::varchar
                     UNION ALL SELECT 'Team Submit Attempts'::varchar, _teamFlagSubmitCt::varchar
                     UNION ALL SELECT 'Player Submit Attempts'::varchar, _playerFlagSubmitCt::varchar
                     UNION ALL SELECT 'Team score'::varchar, _teamScore::varchar
                     UNION ALL SELECT 'Team money'::varchar, _teamMoney::varchar;
                     --ORDER BY 1;
    END;
]]></definition>
</function>

<function name="getteaminfo"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="info">
		<type name="character varying"/>
	</parameter>
	<parameter name="value">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<definition><![CDATA[
    DECLARE
        _playerIp inet;
    BEGIN
        -- Logging
        raise notice 'getTeamInfo()';

        _playerIp := inet_client_addr();
        RETURN QUERY SELECT * FROM getTeamInfoFromIp(_playerIp::varchar);
    END;
]]></definition>
</function>

<function name="getsubmithistory"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="ts">
		<type name="timestamp"/>
	</parameter>
	<parameter name="teamname">
		<type name="character varying"/>
	</parameter>
	<parameter name="flagname">
		<type name="character varying"/>
	</parameter>
	<parameter name="flagpts">
		<type name="integer"/>
	</parameter>
	<parameter name="flagcat">
		<type name="character varying"/>
	</parameter>
	<parameter name="flagtype">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="_top" in="true" default-value="10">
		<type name="integer"/>
	</parameter>
	<parameter name="_typefilter" in="true" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'getSubmitHistory(%,%)',$1,$2;

        RETURN QUERY SELECT r.timestamp,
                            r.TeamName,
                            r.FlagName,
                            r.FlagPts,
                            r.FlagCategory,
                            r.type
                     FROM (
                         SELECT tf.ts AS timestamp,
                                t.name AS TeamName,
                                f.name AS FlagName,
                                f.pts AS FlagPts,
                                c.name AS FlagCategory,
                                1 AS type
                         FROM team_flag as tf
                         LEFT OUTER JOIN (
                            SELECT id,
                                   name
                            FROM team
                         ) AS t ON tf.teamId = t.id
                         LEFT OUTER JOIN (
                            SELECT id,
                                   pts,
                                   name,
                                   category
                            FROM flag
                         ) AS f ON tf.flagId = f.id
                         LEFT OUTER JOIN (
                            SELECT id,
                                   name
                            FROM flagCategory
                         ) AS c ON f.category = c.id
                         UNION ALL
                         SELECT tkf.ts AS timestamp,
                                t2.name AS TeamName,
                                f2.name AS FlagName,
                                kf.pts AS FlagPts,
                                c2.name AS FlagCategory,
                                2 AS type
                         FROM team_kingFlag as tkf
                         LEFT OUTER JOIN (
                            SELECT id,
                                   name
                            FROM team
                         ) AS t2 ON tkf.teamId = t2.id
                         LEFT OUTER JOIN (
                            SELECT id,
                                   flagId,
                                   pts
                            FROM kingFlag
                         ) AS kf ON tkf.kingFlagId = kf.id
                         LEFT OUTER JOIN (
                             SELECT id,
                                    name,
                                    category
                             FROM flag
                         ) AS f2 ON kf.flagId = f2.id
                         LEFT OUTER JOIN (
                            SELECT id,
                                   name
                            FROM flagCategory
                         ) AS c2 ON f2.category = c2.id
                    ) AS r
                    ORDER BY r.timestamp DESC
                    LIMIT _top;
    END;
]]></definition>
</function>

<function name="getflagssubmitcount"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="flagname">
		<type name="character varying"/>
	</parameter>
	<parameter name="submitcount">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="_flagnamefilter" in="true" default-value="'%'::character varying">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'getFlagsSubmitCount(%)',$1;

        return QUERY SELECT ff.fname,count(ff.fname) 
                FROM (  SELECT flag.name as fname, 
                               team.name as tname 
                        FROM team_flag 
                        INNER JOIN flag ON flag.id = team_flag.flagId 
                                           AND team_flag.flagId IN (SELECT id 
                                                                    FROM flag 
                                                                    WHERE name like _flagNameFilter)
                        INNER JOIN team ON team.id = team_flag.teamid 
                        ORDER BY flag.name
                ) as ff GROUP BY ff.fname;
                
    END;
]]></definition>
</function>

<function name="getgamestats"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="info">
		<type name="character varying"/>
	</parameter>
	<parameter name="value">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<definition><![CDATA[
    DECLARE
        _rowCt integer;
        _teamCt integer;
        _hostCt integer;
        _catCt integer;
        _flagCt integer;
        _kingFlagCt integer;
        _teamFlagCt integer;
        _teamKingFlagCt integer;
        _newsCt integer;
        _activePlayerCt integer;
        _flagSubmitCt integer;
        _flagSubmitCt1 integer;
        _flagSubmitCt5 integer;
        _flagSubmitCt15 integer;
        _flagSubmitCt60 integer;
        _firstFlag varchar(100);
        _firstKingFlag varchar(100);
        _gameStartTs timestamp;
        _fnctCt integer;
        _tblCt integer;
    BEGIN
        -- Logging
        raise notice 'getGameStats()';

        -- Get tables informations
        SELECT count(*) INTO _teamCt FROM team;
        SELECT count(*) INTO _hostCt FROM host;
        SELECT count(*) INTO _catCt FROM flagCategory;
        SELECT count(*) INTO _flagCt FROM flag;
        SELECT count(*) INTO _kingFlagCt FROM kingFlag;
        SELECT count(*) INTO _teamFlagCt FROM team_flag;
        SELECT count(*) INTO _teamKingFlagCt FROM team_kingFlag;
        SELECT count(*) INTO _newsCt FROM news;

        -- Get active players count;
        PERFORM playerip FROM submit_history GROUP BY playerip;
        GET DIAGNOSTICS _activePlayerCt = ROW_COUNT;

        -- Get player submitted flag count
        SELECT count(*) INTO _flagSubmitCt FROM submit_history;

        -- Get submit attemps per minute (top style: 1, 5, 15)
        SELECT count(*) INTO _flagSubmitCt1 FROM submit_history 
        WHERE current_timestamp - '1 minute'::interval < ts;
        SELECT count(*)/5 INTO _flagSubmitCt5 FROM submit_history 
        WHERE current_timestamp - '5 minute'::interval < ts;
        SELECT count(*)/15 INTO _flagSubmitCt15 FROM submit_history 
        WHERE current_timestamp - '15 minute'::interval < ts;
        SELECT count(*)/60 INTO _flagSubmitCt60 FROM submit_history 
        WHERE current_timestamp - '60 minute'::interval < ts;

        -- Get successful flag submit per minute (top style: 1, 5, 15)
        
        -- Get first flag successfuly submitted
        SELECT t.teamName || ' entered "' || t.flagName || 
                '" for ' || t.pts || 'pts on ' || to_char(t.ts,'YYYY-MM-DD HH24:MM')
        INTO _firstFlag
        FROM (
            SELECT tf.teamId,
                    tf.flagId,
                    tf.ts,
                    f.name AS flagName,
                    f.pts,
                    t.name as teamName
            FROM team_flag AS tf
            LEFT OUTER JOIN (
                SELECT id,name,pts FROM flag
            ) AS f ON f.id = tf.flagId
            LEFT OUTER JOIN (
                SELECT id,name FROM team
            ) AS t ON t.id = tf.teamId
            ORDER BY tf.ts 
            LIMIT 1
        ) AS t;
        GET DIAGNOSTICS _rowCt = ROW_COUNT;
        if _rowCt <> 1 then
            _firstFlag := ''::varchar;
        end if;

        -- Get first king flag successfuly submitted
        SELECT t.teamName || ' entered "' || t.flagName || 
                '" for ' || t.pts || 'pts on ' || to_char(t.ts,'YYYY-MM-DD HH24:MM')
        INTO _firstKingFlag
        FROM (
            SELECT tf.teamId,
                    tf.ts,
                    f.name AS flagName,
                    f.pts,
                    t.name as teamName
            FROM team_kingFlag AS tf
            LEFT OUTER JOIN (
                SELECT kf.id,
                       kf.pts,
                       ff.name
                FROM kingFlag as kf
                LEFT OUTER JOIN (
                    SELECT id,name FROM flag
                ) AS ff ON ff.id = kf.flagId
            ) AS f ON f.id = tf.kingFlagId
            LEFT OUTER JOIN (
                SELECT id,name FROM team
            ) AS t ON t.id = tf.teamId
            ORDER BY tf.ts 
            LIMIT 1
        ) AS t;
        GET DIAGNOSTICS _rowCt = ROW_COUNT;
        if _rowCt <> 1 then
            _firstKingFlag := ''::varchar;
        end if;

        -- Get game start date&time
        SELECT gameStartTs into _gameStartTs FROM settings;

        -- Get function count in scoreboard schema
        SELECT count(*) INTO _fnctCt
        FROM pg_proc 
        INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid) 
        WHERE ns.nspname = 'scoreboard';

        -- Get table count in scoreboard schema
        SELECT count(*) INTO _tblCt
        FROM pg_tables 
        WHERE schemaname = 'scoreboard';

        -- Return
        RETURN QUERY SELECT 'Team count'::varchar, _teamCt::varchar
                     UNION ALL SELECT 'Host count'::varchar, _hostCt::varchar
                     UNION ALL SELECT 'Category count'::varchar, _catCt::varchar
                     UNION ALL SELECT 'Flag count'::varchar, _flagCt::varchar
                     UNION ALL SELECT 'King Flag count'::varchar, _kingFlagCt::varchar
                     UNION ALL SELECT 'Team Flags count'::varchar, _teamFlagCt::varchar
                     UNION ALL SELECT 'Team King Flag count'::varchar, _teamKingFlagCt::varchar
                     UNION ALL SELECT 'News count'::varchar, _newsCt::varchar
                     UNION ALL SELECT 'Active players'::varchar, _activePlayerCt::varchar
                     UNION ALL SELECT 'Submit Attempts'::varchar, _flagSubmitCt::varchar
                     UNION ALL SELECT 'Submit Attempt per min'::varchar, _flagSubmitCt1::varchar||', '||
                                                                      _flagSubmitCt5::varchar||', '||
                                                                      _flagSubmitCt15::varchar||', '||
                                                                      _flagSubmitCt60::varchar||
                                                                      ' (1min, 5min, 15min, 60min)'
                     UNION ALL SELECT 'First Flag'::varchar, _firstFlag::varchar
                     UNION ALL SELECT 'First King Flag'::varchar, _firstKingFlag::varchar
                     UNION ALL SELECT 'Game Start at:'::varchar, _gameStartTs::varchar
                     UNION ALL SELECT 'Function count:'::varchar, _fnctCt::varchar
                     UNION ALL SELECT 'Table count:'::varchar, _tblCt::varchar;
    END;
]]></definition>
</function>

<function name="getteamprogress"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="flagname">
		<type name="character varying"/>
	</parameter>
	<parameter name="isdone">
		<type name="boolean"/>
	</parameter>
	<parameter name="submitts">
		<type name="timestamp"/>
	</parameter>
	</return-type>
	<parameter name="_teamid" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _ret team.id%TYPE;
    BEGIN
        -- Logging
        raise notice 'getTeamProgress(%)',$1;

        SELECT id INTO _ret FROM team WHERE id = _teamId;
        IF not found THEN
            raise exception 'Could not find team with id %', _teamId;
        END IF;

        return QUERY SELECT name,
                            tf.ts IS NOT Null,
                            tf.ts 
                     FROM flag 
                     LEFT OUTER JOIN (
                        SELECT id,flagId,ts 
                        FROM team_flag 
                        WHERE teamId=_teamId
                     ) AS tf ON flag.id = tf.flagId 
                     ORDER BY tf.ts,name;
                
    END;
]]></definition>
</function>

<function name="getflagprogress"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="teamname">
		<type name="character varying"/>
	</parameter>
	<parameter name="isdone">
		<type name="boolean"/>
	</parameter>
	<parameter name="submittime">
		<type name="timestamp"/>
	</parameter>
	</return-type>
	<parameter name="_flagname" in="true">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[

    DECLARE
        _flagId flag.id%TYPE;
    BEGIN
        -- Logging
        raise notice 'getFlagProgress(%)',$1;

        -- Get id from name
        SELECT id INTO _flagId FROM flag WHERE name = _flagName LIMIT 1;
        if NOT FOUND then
            raise exception 'Could not find flag %', _flagName;
        end if;

        return QUERY SELECT name,
                            tf.ts IS NOT Null,
                            tf.ts 
                     FROM team 
                     LEFT OUTER JOIN (
                        SELECT id,teamId,ts 
                        FROM team_flag 
                        WHERE flagId = _flagId
                     ) AS tf ON team.id = tf.teamId
                     ORDER BY tf.ts,name;
                
    END;
]]></definition>
</function>

<function name="getscoreprogress"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="ts">
		<type name="timestamp"/>
	</parameter>
	<parameter name="t0_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t1_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t2_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t3_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t4_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t5_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t6_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t7_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t8_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t9_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t10_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t11_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t12_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t13_score">
		<type name="integer"/>
	</parameter>
	<parameter name="t14_score">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="_intlimit" in="true" default-value="21">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        MAX_TEAM_NUMBER integer := 200;
        _ts timestamp;
        _minTs timestamp;
        _maxTs timestamp;
        _maxTeams integer := 15;
        _topTeams integer[15];
    BEGIN
        -- Logging
        raise notice 'getScoreProgress(%)',$1;
        
        if _intLimit is null then
            _intLimit := 21;        -- Kinda redundant...
        end if;

        if _intLimit < 1 then
            raise exception 'Interval Limit cannot be null or lower than 1';
        end if;

        -- Determine minimum timestamp
        SELECT x.ts INTO _minTs FROM (
            SELECT team_flag.ts as ts FROM team_flag 
            UNION ALL
            SELECT team_kingFlag.ts as ts FROM team_kingFlag 
        ) AS x ORDER BY ts LIMIT 1;

        -- Determine maximum timestamp
        SELECT x.ts INTO _maxTs FROM (
            SELECT team_flag.ts as ts FROM team_flag 
            UNION ALL
            SELECT team_kingFlag.ts as ts FROM team_kingFlag 
        ) AS x ORDER BY ts DESC LIMIT 1;

        -- if min = max, throw an exception
        if _minTs is null or _minTs = _maxTs then
            _minTs = current_timestamp - '1 minute'::interval;
            _maxTs = current_timestamp;           
        end if;

        -- Generate a serie of all checkpoint
        -- http://www.postgresql.org/docs/9.1/static/functions-srf.html

        -- foreach timestamp: SELECT team,flagTotal FROM getScore(15,timestamp)

        -- Create temporary table for all this data
        CREATE TEMPORARY TABLE scoreProgress(
            ts timestamp,
            id integer,
            name varchar(50),
            total integer) ON COMMIT DROP;

        -- Get top 15 teams
        SELECT array(SELECT id FROM getScore(_maxTeams) ORDER BY flagTotal DESC) INTO _topTeams; 

        -- Insert a blank line 
        INSERT INTO scoreProgress(ts,id,name,total)
               SELECT  (_minTs - '1 minute'::interval)::timestamp,
                       s.id,
                       s.team,
                       0 
               FROM getScore(MAX_TEAM_NUMBER) AS s
               WHERE s.id = ANY(_topTeams)
               ORDER BY idx(_topTeams, s.id);

        -- For each checkpoint, append a score checkpoint to the temporary table
        FOR _ts IN SELECT generate_series 
            FROM generate_series(_minTs,_maxTs,(_maxTs-_minTs)::interval / _intLimit) 
        LOOP
            INSERT INTO scoreProgress(ts,id,name,total)
                   SELECT  _ts,
                           s.id,
                           s.team,
                           s.flagTotal
                   FROM getScore(MAX_TEAM_NUMBER,_ts::varchar) AS s
                   WHERE s.id = ANY(_topTeams)
                   ORDER BY idx(_topTeams, s.id);
        END LOOP;

        -- Insert current score
        INSERT INTO scoreProgress(ts,id,name,total)
               SELECT  _maxTs,
                       s.id,
                       s.team,
                       s.flagTotal 
               FROM getScore(MAX_TEAM_NUMBER,_maxTs::varchar) AS s
               WHERE s.id = ANY(_topTeams)
               ORDER BY idx(_topTeams, s.id);
        
        -- Return a crosstab of the temporary table 
        RETURN QUERY SELECT * FROM tablefunc.crosstab(
            'SELECT ts,name,total FROM scoreProgress ORDER BY ts',
            'SELECT name FROM team WHERE id = ANY(array[' || array_to_string(_topTeams,',') ||']) ORDER BY scoreboard.idx(array['||array_to_string(_topTeams,',')||'],id)'
                     ) as ct(
                        ts timestamp,
                        t0_score integer,
                        t1_score integer,
                        t2_score integer,
                        t3_score integer,
                        t4_score integer,
                        t5_score integer,
                        t6_score integer,
                        t7_score integer,
                        t8_score integer,
                        t9_score integer,
                        t10_score integer,
                        t11_score integer,
                        t12_score integer,
                        t13_score integer,
                        t14_score integer
                        );
                        
    END;
]]></definition>
</function>

<function name="startgame"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'startGame()';

        UPDATE settings SET gameStartTs = current_timestamp;
        RETURN 0;
    END;
]]></definition>
</function>

<function name="setsetting"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_attr" default-value="'text'::character varying">
		<type name="text"/>
	</parameter>
	<parameter name="_value">
		<type name="text"/>
	</parameter>
	<parameter name="_type">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'setSetting(%,%,%)',$1,$2,$3;

        -- Safe update using format()
        -- TODO: See if %s is vulnerable to sqli
        EXECUTE format('UPDATE settings SET %I = %L::%s;',lower(_attr),_value,_type);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="getsettings"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="key">
		<type name="text"/>
	</parameter>
	<parameter name="value">
		<type name="text"/>
	</parameter>
	</return-type>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'getSettings()';

        RETURN QUERY SELECT unnest(array['gameStartTs','gameEndTs','teamStartMoney'])::text AS "Key", 
                            unnest(array[gameStartTs::text,gameEndTs::text,teamStartMoney::text])::text as "Value" 
                     FROM settings;
    END;
]]></definition>
</function>

<function name="insertrandomdata"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<definition><![CDATA[
    DECLARE
        TEAM_COUNT              integer := 50;
        FLAG_COUNT              integer := 1000;
        FLAG_IS_KING_COUNT      integer := 1000;
        KINGFLAG_PER_FLAG_COUNT integer := 3;
        FLAG_ASSIGN_LIMIT       integer := 500;
        FLAG_TS_MIN             integer := 960;
        KINGFLAG_ASSIGN_LIMIT   integer := 500;
        KINGFLAG_TS_MIN         integer := 960;
        PLAYER_IP_MIN           integer := 100;
        PLAYER_IP_MAX           integer := 200;
        SUBMIT_HIST_COUNT       integer := 1000;
        SUBMIT_HIST_TS_MIN      integer := 960;
        FLAG_SUBMIT_RATE        real := 0.11;
        KINGFLAG_SUBMIT_RATE    real := 0.11;
        MAX_PTS                 integer := 10;
        MAX_HOST                integer := 7;
        MAX_CAT                 integer := 9;
        _teamId team.id%TYPE;
        _net team.net%TYPE;
    BEGIN
        -- Logging
        raise notice 'insertRandomData()';

        -- Insert random teams
        INSERT INTO team(name,net) 
        SELECT 'Team '||id,('172.29.'||id||'.0/32')::inet
        FROM generate_series(1,TEAM_COUNT) as id;

        -- Insert random flags where isKing = False
        INSERT INTO flag(name,value,pts,host,category,updateCmd,monitorCmd,statusCode,isKing,description,hint) 
        SELECT 'Flag '||id,
                random_32(),
                random() * (MAX_PTS - 1) + 1,
                random() * (MAX_HOST - 1) + 1,
                random() * (MAX_CAT - 1) + 1,
                'echo $FLAG > /root/flag'||id||'.txt',
                'bla',
                1,
                False,
                'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis elementum sem non porttitor vestibulum.',
                ''
        FROM generate_series(1,FLAG_COUNT) as id;

        -- Insert random flags where isKing = True
        INSERT INTO flag(name,value,pts,host,category,updateCmd,monitorCmd,statusCode,isKing,description,hint) 
        SELECT 'Flag '||id,
                random_32(),
                random() * (MAX_PTS - 1) + 1,
                random() * (MAX_HOST - 1) + 1,
                random() * (MAX_CAT - 1) + 1,
                'echo $FLAG > /root/flag'||id||'.txt',
                'bla',
                1,
                True,
                'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis elementum sem non porttitor vestibulum.',
                ''
        FROM generate_series(FLAG_COUNT+1,FLAG_COUNT+1+FLAG_IS_KING_COUNT) as id;

        -- Insert random king flags
        INSERT INTO kingFlag(flagId,value,pts) 
        SELECT flag.id,
                random_32(),
                1           --random() * 9 + 1
        FROM flag,generate_series(1,KINGFLAG_PER_FLAG_COUNT)
        WHERE flag.isKing = True;

        -- Assign flags to team randomly
        FOR _teamId,_net IN SELECT id,net FROM team LOOP
            INSERT INTO team_flag(teamId,flagId,playerIp,ts)
                SELECT _teamId,
                       flag.id,
                        (_net + (random() * PLAYER_IP_MIN + PLAYER_IP_MAX)::integer),
                       current_timestamp - (random() * FLAG_TS_MIN || ' minutes')::interval
                FROM flag
                WHERE random() < FLAG_SUBMIT_RATE
                LIMIT FLAG_ASSIGN_LIMIT;
            INSERT INTO submit_history(teamId,playerIp,value,ts)
                SELECT  _teamId,
                        (_net + (random() * PLAYER_IP_MIN + PLAYER_IP_MAX)::integer),
                        f.value,
                       current_timestamp - (random() * SUBMIT_HIST_TS_MIN || ' minutes')::interval
                FROM team_flag AS tf
                LEFT OUTER JOIN (
                    SELECT id,value
                    FROM flag
                ) AS f ON tf.flagId = f.id
                WHERE teamId = _teamId;
        END LOOP;

        -- Assign king flags to teams randomly
        FOR _teamId IN SELECT id FROM team LOOP
            INSERT INTO team_kingFlag(teamId,kingFlagId,playerIp,ts)
                SELECT _teamId,
                       kingFlag.id,
                       (_net + (random() * PLAYER_IP_MIN + PLAYER_IP_MAX)::integer),
                       current_timestamp - (random() * KINGFLAG_TS_MIN || ' minutes')::interval
                FROM kingFlag
                WHERE random() < KINGFLAG_SUBMIT_RATE 
                LIMIT KINGFLAG_ASSIGN_LIMIT;
            INSERT INTO submit_history(teamId,playerIp,value,ts)
                SELECT  _teamId,
                        (_net + (random() * PLAYER_IP_MIN + PLAYER_IP_MAX)::integer),
                        f.value,
                       current_timestamp - (random() * SUBMIT_HIST_TS_MIN || ' minutes')::interval
                FROM team_kingFlag AS tkf
                LEFT OUTER JOIN (
                    SELECT id,value
                    FROM kingFlag
                ) AS f ON tkf.kingFlagId = f.id
                WHERE teamId = _teamId;
        END LOOP;

        -- Insert some fake flag submit in submit_history
        FOR _teamId,_net IN SELECT id,net FROM team LOOP
            INSERT INTO submit_history(teamId,playerIp,value,ts)
            SELECT  _teamId,
                (_net + (random() * PLAYER_IP_MIN + PLAYER_IP_MAX)::integer),
                random()::varchar,
                current_timestamp - (random() * SUBMIT_HIST_TS_MIN || ' minutes')::interval
            FROM generate_series(1,SUBMIT_HIST_COUNT) as id;
        END LOOP;

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addbmitemcategory"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_displayname">
		<type name="character varying"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addBMItemCategory(%,%,%)',$1,$2,$3;

        -- Insert a new row
        INSERT INTO bmItemCategory(name,displayName,description)
                VALUES(_name,_displayName,_description);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addbmitemstatus"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_code" default-value="''::text">
		<type name="integer"/>
	</parameter>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addBMItemStatus(%,%,%)',$1,$2,$3;

        -- Insert a new row
        INSERT INTO bmItemStatus(code,name,description)
                VALUES(_code,_name,_description);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="setbmitemstatus"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_bmitemid">
		<type name="integer"/>
	</parameter>
	<parameter name="_bmitemstatuscode">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'setBMItemStatus(%,%)',$1,$2;

        -- Update bmItem
        UPDATE bmItem
        SET statusCode = _bmItemStatusCode
        WHERE id = _bmItemId;
        
        -- Insert a new row in history
        INSERT INTO bmItemStatus_history(bmItemId,statusCode)
                VALUES(_bmItemId,_bmItemStatusCode);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addbmitem"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_category">
		<type name="character varying"/>
	</parameter>
	<parameter name="_statuscode">
		<type name="integer"/>
	</parameter>
	<parameter name="_ownerwallet">
		<type name="integer"/>
	</parameter>
	<parameter name="_amount">
		<type name="money"/>
	</parameter>
	<parameter name="_qty">
		<type name="integer"/>
	</parameter>
	<parameter name="_displayinterval">
		<type name="character varying"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<parameter name="_data">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _bmItemId bmItem.id%TYPE;
        _catId bmItemCategory.id%TYPE;
        _display bmItem.displayInterval%TYPE;
        BMI_FOR_SALE_STATUS bmItemStatus.code%TYPE := 1;
    BEGIN
        -- Logging
        raise notice 'addFlag(%,%,%,%,%,%,%)',$1,$2,$3,$4,$5,$6,$7;

        -- Get category id from name
        SELECT id INTO _catId FROM bmItemCategory WHERE name = _category;
        if not FOUND then
            raise exception 'Could not find category "%"',_category;
        end if;

        -- Verify status code exist
        PERFORM code FROM bmItemStatus WHERE code = _statusCode;
        if not FOUND then
            raise exception 'Could not find status code "%"',_statusCode;
        end if;

        -- Verify amount
        if _amount <= 0::money then
            raise exception 'Black market item cannot cost < 0';
        end if;

        -- Verify quantity
        if _qty is not Null and _qty <= 0 then
            raise exception 'Black market item quantity cannot be < 0';
        end if;

        -- Convert displayInterval
        if _displayInterval is not Null then
            _display = _displayInterval::interval;
        else
            _display = _displayInterval;
        end if;

        -- Insert a new row
        INSERT INTO bmItem(publicId,name,category,statusCode,ownerWallet,amount,qty,displayInterval,description,data)
                VALUES(random_64(),_name,_catId,_statusCode,_ownerWallet,_amount,_qty,_display,_description,_data);
        _bmItemId := LASTVAL();

        -- Set initial status
        PERFORM setBMItemStatus(_bmItemId,BMI_FOR_SALE_STATUS);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="checkteamsolvency"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_teamid">
		<type name="integer"/>
	</parameter>
	<parameter name="_itemid">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _walletId wallet.id%TYPE;
        _walletAmount wallet.amount%TYPE;
        _bmItemAmount bmItem.amount%TYPE;
    BEGIN
        -- Logging
        raise notice 'checkTeamSolvency(%,%)',$1,$2;

        -- Get team walletId
        SELECT wallet INTO _walletId FROM team WHERE id = _teamId;
        if not FOUND then
            raise exception 'Could not find the team ID "%"',_teamId;
        end if;

        -- Get wallet amount
        SELECT amount INTO _walletAmount FROM wallet WHERE id = _walletId;
        if not FOUND then
            raise exception 'Could not find the wallet of team ID "%"',_teamId;
        end if;

        -- Get black market item amount
        SELECT amount INTO _bmItemAmount FROM bmItem WHERE id = _itemId;
        if not FOUND then
            raise exception 'Could not find the black market item ID "%"',_itemId;
        end if;

        -- Check that the player has enough money
        if _walletAmount < _bmItemAmount then
            raise exception 'Not enough money to buy the item';
        end if;

        RETURN 0;
    END;
]]></definition>
</function>

<function name="checkitemavailability"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_bmitemid" default-value="NULL::integer">
		<type name="integer"/>
	</parameter>
	<parameter name="_teamid">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _bmItemRec bmItem%ROWTYPE;
        _bmItemStatus bmItemStatus.name%TYPE;
    BEGIN
        -- Logging
        raise notice 'checkItemAvailability(%,%)',$1,$2;

        -- Get black market item record
        SELECT * INTO _bmItemRec FROM bmItem WHERE id = _bmItemId;
        if not FOUND then
            raise exception 'Could not find the black market item ID "%"',_bmItemId;
        end if;

        -- Check item status
        if _bmItemRec.statusCode > 1 then
            SELECT name INTO _bmItemStatus FROM bmItemStatus WHERE id = _bmItemRec.statusCode;
            raise exception 'Item is not available. Current status: "%"';
        end if;

        -- Check item qty
        if _bmItemRec.qty = 0 then
            raise exception 'Item is out of stock.';
        end if;

        -- if a teamId is specified.
        if _teamId is not null then
            -- Determine if the team already bought this item
            PERFORM id FROM team_bmItem WHERE teamId = _teamId AND bmItemId = _bmItemId;
            if FOUND then
                raise exception 'Item "%" was already acquired by team "%"',_bmItemId,_teamId;
            end if;

            -- Determine if the team is the item's owner
            SELECT id,
                   wallet 
            FROM team AS t
            LEFT OUTER JOIN (
                SELECT id,
                       ownerWallet
                FROM bmItem 
            ) AS bmi ON t.wallet = bmi.ownerWallet
            WHERE t.id= _teamId AND bmi.id = _bmItemId;
            if FOUND then
                raise exception 'You cannot buy an item you are selling';
            end if;
        end if;

        RETURN 0;
    END;
]]></definition>
</function>

<function name="buybmitemfromip"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_bmitemid">
		<type name="integer"/>
	</parameter>
	<parameter name="_playeripstr">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _playerIp inet;
        _teamId team.id%TYPE;
        _teamWalletId wallet.id%TYPE;
        _ownerWalletId wallet.id%TYPE;
        _bmItemAmount bmItem.amount%TYPE;
        _bmItemQty bmItem.qty%TYPE;
        BMI_SOLD_STATUS bmItemStatus.code%TYPE := 2;
        TR_BOUGHT_STATUS transactionType.code%TYPE := 3;
    BEGIN
        -- Logging
        raise notice 'buyBMItem(%,%)',$1,$2;

        -- Get team from userIp 
        _playerIp := _playerIpStr::inet;
        SELECT id INTO _teamId FROM team where _playerIp << net ORDER BY id DESC LIMIT 1;
        if NOT FOUND then
            raise exception 'Team not found for %',_playerIp;
        end if;

        -- Check team solvency
        PERFORM checkTeamSolvency(_teamId,_bmItemId);

        -- Check item availability
        PERFORM checkItemAvailability(_teamId,_bmItemId);

        -- Transfer money
        SELECT wallet INTO _teamWalletId FROM team WHERE id = _teamId;
        SELECT ownerWallet,amount,qty INTO _ownerWalletId,_bmItemAmount,_bmItemQty FROM bmItem WHERE id = _bmItemId;
        PERFORM transferMoney(_teamWalletId,_ownerWalletId,_bmItemAmount,TR_BOUGHT_STATUS);

        -- Assign item
        INSERT INTO team_bmItem(teamId,bmItemId,playerIp)
               VALUES(_teamId,_bmItemId,_playerIp);

        -- Update qty
        UPDATE bmItem
        SET qty = qty - 1
        WHERE id = _bmItemId;

        -- Update status if needed
        if _bmItemQty = 1 then
            PERFORM setBMItemStatus(_bmItemId,BMI_SOLD_STATUS);
        end if;

        RETURN 0;
    END;
]]></definition>
</function>

<function name="sellbmitemfromip"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_amount">
		<type name="money"/>
	</parameter>
	<parameter name="_qty">
		<type name="money"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<parameter name="_data">
		<type name="text"/>
	</parameter>
	<parameter name="_playerip">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _playerIp inet;
        _ownerWalletId bmItem.ownerWallet%TYPE;
        _catId bmItemCategory.id%TYPE;
        _catName bmItemCategory.name%TYPE := 'player';
        BMI_APPROVAL_STATUS bmItemStatus.code%TYPE := 3;
    BEGIN
        -- Logging
        raise notice 'sellBMItemFromIp(%,%,%,%,%)',$1,$2,$3,$4,$5;

        -- Get team from userIp 
        _playerIp := _playerIpStr::inet;
        SELECT wallet INTO _ownerWalletId FROM team where _playerIp << net ORDER BY wallet DESC LIMIT 1;
        if NOT FOUND then
            raise exception 'Team not found for %',_playerIp;
        end if;

        -- Add a new black market item
        PERFORM addBMItem(_name,_catName,BMI_APPROVAL_STATUS,_ownerWalletId,_amount,_qty,Null,_description,_data);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="reviewbmitem"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_bmitemid">
		<type name="integer"/>
	</parameter>
	<parameter name="_statuscode">
		<type name="integer"/>
	</parameter>
	<parameter name="_rating">
		<type name="integer"/>
	</parameter>
	<parameter name="_comments">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    DECLARE
        _reviewId bmItemReview.id%TYPE;
    BEGIN
        -- Logging
        raise notice 'reviewBMItem(%,%,%,%)',$1,$2,$3,$4;

        -- Insert review
        INSERT INTO bmItemReview(rating,comments) VALUES(_rating,_comments);
        _reviewId := LASTVAL();

        -- Assign review
        UPDATE bmItem
        SET review = _reviewId
        WHERE id = _bmItemId;

        -- Update status
        PERFORM setBMItemStatus(_bmItemId,_statusCode);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="addeventseverity"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="_code">
		<type name="integer"/>
	</parameter>
	<parameter name="_name">
		<type name="character varying"/>
	</parameter>
	<parameter name="_keyword">
		<type name="character varying"/>
	</parameter>
	<parameter name="_description">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'addEventSeverity(%,%,%,%)',$1,$2,$3,$4;

        -- Some checks
        if _name is null then
            raise exception 'Name cannot be null';
        end if;

        if _keyword is null then
            raise exception 'Keyword cannot be null';
        end if;

        -- Insert a new row
        INSERT INTO eventSeverity(code,name,keyword,description) VALUES(_code,_name,_keyword,_description);

        RETURN 0;
    END;
]]></definition>
</function>

<function name="getevents"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="1000">
	<schema name="scoreboard"/>
	<role name="owner"/>
	<language name="plpgsql" protected="true" sql-disabled="true"/>
	<return-type>
	<parameter name="srcwallet">
		<type name="character varying"/>
	</parameter>
	<parameter name="dstwallet">
		<type name="character varying"/>
	</parameter>
	<parameter name="amount">
		<type name="money"/>
	</parameter>
	<parameter name="transactiontype">
		<type name="character varying"/>
	</parameter>
	<parameter name="ts">
		<type name="timestamp"/>
	</parameter>
	</return-type>
	<parameter name="_lastupdatets" in="true" default-value="30">
		<type name="timestamp"/>
	</parameter>
	<parameter name="_top" in="true" default-value="0">
		<type name="integer"/>
	</parameter>
	<parameter name="_level" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
    BEGIN
        -- Logging
        raise notice 'getTransactionHistory(%)',$1;

        -- Some check 
        if _top <= 0 then
            raise exception '_top argument cannot be a negative value. _top=%',_top;
        end if;

    END;
]]></definition>
</function>

<constraint name="team_wallet_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="scoreboard.wallet" table="scoreboard.team">
	<columns names="wallet" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="flag_host_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="scoreboard.host" table="scoreboard.flag">
	<columns names="host" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="flag_category_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="scoreboard.flagcategory" table="scoreboard.flag">
	<columns names="category" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="flag_statuscode_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="scoreboard.flagstatus" table="scoreboard.flag">
	<columns names="statuscode" ref-type="src-columns"/>
	<columns names="code" ref-type="dst-columns"/>
</constraint>

<constraint name="flag_author_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="scoreboard.flagauthor" table="scoreboard.flag">
	<columns names="author" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="flag_type_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="scoreboard.flagtype" table="scoreboard.flag">
	<columns names="type" ref-type="src-columns"/>
	<columns names="code" ref-type="dst-columns"/>
</constraint>

<constraint name="kingflag_flagid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="scoreboard.flag" table="scoreboard.kingflag">
	<columns names="flagid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="team_flag_teamid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.team" table="scoreboard.team_flag">
	<columns names="teamid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="team_flag_flagid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.flag" table="scoreboard.team_flag">
	<columns names="flagid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="team_kingflag_teamid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.team" table="scoreboard.team_kingflag">
	<columns names="teamid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="team_kingflag_kingflagid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.kingflag" table="scoreboard.team_kingflag">
	<columns names="kingflagid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="submit_history_teamid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.team" table="scoreboard.submit_history">
	<columns names="teamid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="flagstatus_history_flagid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.flag" table="scoreboard.flagstatus_history">
	<columns names="flagid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="flagstatus_history_statuscode_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.flagstatus" table="scoreboard.flagstatus_history">
	<columns names="statuscode" ref-type="src-columns"/>
	<columns names="code" ref-type="dst-columns"/>
</constraint>

<constraint name="transaction_srcwalletid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.wallet" table="scoreboard.transaction">
	<columns names="srcwalletid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="transaction_dstwalletid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.wallet" table="scoreboard.transaction">
	<columns names="dstwalletid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="transaction_type_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.transactiontype" table="scoreboard.transaction">
	<columns names="type" ref-type="src-columns"/>
	<columns names="code" ref-type="dst-columns"/>
</constraint>

<constraint name="bmitem_category_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.bmitemcategory" table="scoreboard.bmitem">
	<columns names="category" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="bmitem_statuscode_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.bmitemstatus" table="scoreboard.bmitem">
	<columns names="statuscode" ref-type="src-columns"/>
	<columns names="code" ref-type="dst-columns"/>
</constraint>

<constraint name="bmitem_review_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.bmitemreview" table="scoreboard.bmitem">
	<columns names="review" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="bmitem_ownerwallet_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.wallet" table="scoreboard.bmitem">
	<columns names="ownerwallet" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="team_bmitem_teamid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.team" table="scoreboard.team_bmitem">
	<columns names="teamid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="team_bmitem_bmitemid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.bmitem" table="scoreboard.team_bmitem">
	<columns names="bmitemid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="event_severity_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.eventseverity" table="scoreboard.event">
	<columns names="severity" ref-type="src-columns"/>
	<columns names="code" ref-type="dst-columns"/>
</constraint>

<constraint name="bmitemstatus_history_bmitemid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.bmitem" table="scoreboard.bmitemstatus_history">
	<columns names="bmitemid" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="bmitemstatus_history_statuscode_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="scoreboard.bmitemstatus" table="scoreboard.bmitemstatus_history">
	<columns names="statuscode" ref-type="src-columns"/>
	<columns names="code" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_team_wallet" type="relfk"
	 custom-color="#02c058"
	 src-table="scoreboard.team"
	 dst-table="scoreboard.wallet"
	 src-required="false" dst-required="false"/>

<relationship name="rel_flag_host" type="relfk"
	 custom-color="#b46ce5"
	 src-table="scoreboard.flag"
	 dst-table="scoreboard.host"
	 src-required="false" dst-required="false"/>

<relationship name="rel_flag_flagcategory" type="relfk"
	 custom-color="#38c0c5"
	 src-table="scoreboard.flag"
	 dst-table="scoreboard.flagcategory"
	 src-required="false" dst-required="false"/>

<relationship name="rel_flag_flagstatus" type="relfk"
	 custom-color="#4a965c"
	 src-table="scoreboard.flag"
	 dst-table="scoreboard.flagstatus"
	 src-required="false" dst-required="false"/>

<relationship name="rel_flag_flagauthor" type="relfk"
	 custom-color="#7c75ce"
	 src-table="scoreboard.flag"
	 dst-table="scoreboard.flagauthor"
	 src-required="false" dst-required="false"/>

<relationship name="rel_flag_flagtype" type="relfk"
	 custom-color="#ff7db5"
	 src-table="scoreboard.flag"
	 dst-table="scoreboard.flagtype"
	 src-required="false" dst-required="false"/>

<relationship name="rel_kingflag_flag" type="relfk"
	 custom-color="#fd1930"
	 src-table="scoreboard.kingflag"
	 dst-table="scoreboard.flag"
	 src-required="false" dst-required="false"/>

<relationship name="rel_team_flag_team" type="relfk"
	 custom-color="#6699b0"
	 src-table="scoreboard.team_flag"
	 dst-table="scoreboard.team"
	 src-required="false" dst-required="false"/>

<relationship name="rel_team_flag_flag" type="relfk"
	 custom-color="#56a7db"
	 src-table="scoreboard.team_flag"
	 dst-table="scoreboard.flag"
	 src-required="false" dst-required="false"/>

<relationship name="rel_team_kingflag_team" type="relfk"
	 custom-color="#512d65"
	 src-table="scoreboard.team_kingflag"
	 dst-table="scoreboard.team"
	 src-required="false" dst-required="false"/>

<relationship name="rel_team_kingflag_kingflag" type="relfk"
	 custom-color="#f26292"
	 src-table="scoreboard.team_kingflag"
	 dst-table="scoreboard.kingflag"
	 src-required="false" dst-required="false"/>

<relationship name="rel_submit_history_team" type="relfk"
	 custom-color="#bd5fbd"
	 src-table="scoreboard.submit_history"
	 dst-table="scoreboard.team"
	 src-required="false" dst-required="false"/>

<relationship name="rel_flagstatus_history_flag" type="relfk"
	 custom-color="#1a28a6"
	 src-table="scoreboard.flagstatus_history"
	 dst-table="scoreboard.flag"
	 src-required="false" dst-required="false"/>

<relationship name="rel_flagstatus_history_flagstatus" type="relfk"
	 custom-color="#c85559"
	 src-table="scoreboard.flagstatus_history"
	 dst-table="scoreboard.flagstatus"
	 src-required="false" dst-required="false"/>

<relationship name="rel_transaction_wallet" type="relfk"
	 custom-color="#3f268a"
	 src-table="scoreboard.transaction"
	 dst-table="scoreboard.wallet"
	 src-required="false" dst-required="false"/>

<relationship name="rel_transaction_transactiontype" type="relfk"
	 custom-color="#318d1c"
	 src-table="scoreboard.transaction"
	 dst-table="scoreboard.transactiontype"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bmitem_bmitemcategory" type="relfk"
	 custom-color="#001ec7"
	 src-table="scoreboard.bmitem"
	 dst-table="scoreboard.bmitemcategory"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bmitem_bmitemstatus" type="relfk"
	 custom-color="#18147e"
	 src-table="scoreboard.bmitem"
	 dst-table="scoreboard.bmitemstatus"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bmitem_bmitemreview" type="relfk"
	 custom-color="#03bbaa"
	 src-table="scoreboard.bmitem"
	 dst-table="scoreboard.bmitemreview"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bmitem_wallet" type="relfk"
	 custom-color="#2cad0f"
	 src-table="scoreboard.bmitem"
	 dst-table="scoreboard.wallet"
	 src-required="false" dst-required="false"/>

<relationship name="rel_team_bmitem_team" type="relfk"
	 custom-color="#c629ee"
	 src-table="scoreboard.team_bmitem"
	 dst-table="scoreboard.team"
	 src-required="false" dst-required="false"/>

<relationship name="rel_team_bmitem_bmitem" type="relfk"
	 custom-color="#9f11e1"
	 src-table="scoreboard.team_bmitem"
	 dst-table="scoreboard.bmitem"
	 src-required="false" dst-required="false"/>

<relationship name="rel_event_eventseverity" type="relfk"
	 custom-color="#285d47"
	 src-table="scoreboard.event"
	 dst-table="scoreboard.eventseverity"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bmitemstatus_history_bmitem" type="relfk"
	 custom-color="#dad633"
	 src-table="scoreboard.bmitemstatus_history"
	 dst-table="scoreboard.bmitem"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bmitemstatus_history_bmitemstatus" type="relfk"
	 custom-color="#1584fa"
	 src-table="scoreboard.bmitemstatus_history"
	 dst-table="scoreboard.bmitemstatus"
	 src-required="false" dst-required="false"/>

<permission>
	<object name="scoreboard" type="database"/>
	<privileges connect="true" temporary="true"/>
</permission>
<permission>
	<object name="scoreboard" type="database"/>
	<roles names="owner"/>
	<privileges create="true" connect="true" temporary="true"/>
</permission>
<permission>
	<object name="scoreboard" type="database"/>
	<roles names="hfadmins"/>
	<privileges connect="true"/>
</permission>
<permission>
	<object name="scoreboard" type="database"/>
	<roles names="hfplayers"/>
	<privileges connect="true"/>
</permission>
<permission>
	<object name="scoreboard" type="database"/>
	<roles names="hfscore"/>
	<privileges connect="true"/>
</permission>
<permission>
	<object name="scoreboard" type="database"/>
	<roles names="hfflagupdater"/>
	<privileges connect="true"/>
</permission>
<permission>
	<object name="scoreboard" type="schema"/>
	<roles names="owner"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="scoreboard" type="schema"/>
	<roles names="hfadmins"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="scoreboard" type="schema"/>
	<roles names="hfplayers"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="scoreboard" type="schema"/>
	<roles names="hfscore"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="scoreboard" type="schema"/>
	<roles names="hfflagupdater"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="pgcrypto" type="schema"/>
	<roles names="owner"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="pgcrypto" type="schema"/>
	<roles names="hfadmins"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="pgcrypto" type="schema"/>
	<roles names="hfplayers"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="pgcrypto" type="schema"/>
	<roles names="hfscore"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="tablefunc" type="schema"/>
	<roles names="owner"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="tablefunc" type="schema"/>
	<roles names="hfadmins"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="tablefunc" type="schema"/>
	<roles names="hfplayers"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="tablefunc" type="schema"/>
	<roles names="hfscore"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="scoreboard.emptytables()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.sha256(text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.random_64()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.random_32()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.idx(anyarray,anyelement)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.transfermoney(integer,integer,money,integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.laundermoney(integer,money)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.laundermoneyfromteamid(integer,money)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addwallet(character varying,text,money)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.initbank(money)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addtransactiontype(integer,character varying,text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.gettransactionhistory(IN integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getteamtransactionhistory(IN integer,IN integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addteam(character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addteam(character varying,character varying)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.modteam(integer,character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.modteam(integer,character varying,character varying)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.listteams(IN integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.listteams(IN integer)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.rewardteam(integer,character varying,integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.rewardteam(integer,character varying,integer)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addflagstatus(integer,character varying,text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addflagcategory(character varying,character varying,text,boolean)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addnews(character varying,timestamp)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addnews(character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addnews(character varying,character varying)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.modnews(integer,character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.modnews(integer,character varying,character varying)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addhost(character varying,character varying,text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addauthor(character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addflagtype(integer,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addflag(character varying,character varying,integer,character varying,character varying,integer,character varying,character varying,character varying,boolean,text,text,character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addrandomflag(character varying,integer,character varying,character varying,integer,character varying,character varying,character varying,boolean,text,text,character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addkingflagfromid(integer,character varying,integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addkingflagfromname(character varying,character varying,integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addrandomkingflagfromid(integer,integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addrandomkingflagfromid(integer,integer)" type="function"/>
	<roles names="hfflagupdater"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.listflags(IN integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.listflags(IN integer)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.logsubmit(character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.logsubmit(character varying,character varying)" type="function"/>
	<roles names="hfscore"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.logsubmit(character varying,character varying)" type="function"/>
	<roles names="hfplayers"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.submitflagfromip(character varying,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.submitflagfromip(character varying,character varying)" type="function"/>
	<roles names="hfscore"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.submitflagfromip(character varying,character varying)" type="function"/>
	<roles names="hfplayers"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getscore(IN integer,IN character varying,IN character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getscore(IN integer,IN character varying,IN character varying)" type="function"/>
	<roles names="hfplayers"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getscore(IN integer,IN character varying,IN character varying)" type="function"/>
	<roles names="hfscore"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getscore(IN integer,IN character varying,IN character varying)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getflagvaluefromname(character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getcatprogressfromip(IN character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getcatprogressfromip(IN character varying)" type="function"/>
	<roles names="hfscore"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getcatprogressfromip(IN character varying)" type="function"/>
	<roles names="hfplayers"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getflagprogressfromip(IN character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getflagprogressfromip(IN character varying)" type="function"/>
	<roles names="hfscore"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getflagprogressfromip(IN character varying)" type="function"/>
	<roles names="hfplayers"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getallkingflags()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getallkingflags()" type="function"/>
	<roles names="hfflagupdater"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getkingflagsfromhost(IN character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getkingflagsfromhost(IN character varying)" type="function"/>
	<roles names="hfflagupdater"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getkingflagsfromname(IN character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getkingflagsfromname(IN character varying)" type="function"/>
	<roles names="hfflagupdater"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getnews()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getnews()" type="function"/>
	<roles names="hfplayers"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getnews()" type="function"/>
	<roles names="hfscore"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getnews()" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getteaminfofromip(IN character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getteaminfofromip(IN character varying)" type="function"/>
	<roles names="hfscore"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getteaminfofromip(IN character varying)" type="function"/>
	<roles names="hfplayers"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getteaminfo()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getsubmithistory(IN integer,IN integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getsubmithistory(IN integer,IN integer)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getflagssubmitcount(IN character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getflagssubmitcount(IN character varying)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getgamestats()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getgamestats()" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getteamprogress(IN integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getteamprogress(IN integer)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getflagprogress(IN character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getflagprogress(IN character varying)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getscoreprogress(IN integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getscoreprogress(IN integer)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getscoreprogress(IN integer)" type="function"/>
	<roles names="hfscore"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.startgame()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.startgame()" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.setsetting(text,text,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.setsetting(text,text,character varying)" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getsettings()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getsettings()" type="function"/>
	<roles names="hfadmins"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.insertrandomdata()" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addbmitemcategory(character varying,character varying,text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addbmitemstatus(integer,character varying,text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.setbmitemstatus(integer,integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addbmitem(character varying,character varying,integer,integer,money,integer,character varying,text,text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.checkteamsolvency(integer,integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.checkitemavailability(integer,integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.buybmitemfromip(integer,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.sellbmitemfromip(character varying,money,money,text,text,character varying)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.reviewbmitem(integer,integer,integer,text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.addeventseverity(integer,character varying,character varying,text)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="scoreboard.getevents(IN timestamp,IN integer,IN integer)" type="function"/>
	<roles names="owner"/>
	<privileges execute="true"/>
</permission>
</dbmodel>
